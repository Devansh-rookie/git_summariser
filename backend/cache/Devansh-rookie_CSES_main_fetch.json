{
  "owner": "Devansh-rookie",
  "repo": "CSES",
  "branch": "main",
  "data": [
    {
      "type": "Repository-Contents",
      "data": {
        ".DS_Store": null,
        "CppProperties.json": "{\n  \"configurations\": [\n    {\n      \"inheritEnvironments\": [\n        \"msvc_x64\"\n      ],\n      \"name\": \"x64-Release\",\n      \"includePath\": [\n        \"${env.INCLUDE}\",\n        \"${workspaceRoot}\\\\**\"\n      ],\n      \"defines\": [\n        \"WIN32\",\n        \"NDEBUG\",\n        \"UNICODE\",\n        \"_UNICODE\"\n      ],\n      \"intelliSenseMode\": \"windows-msvc-x64\"\n    }\n  ]\n}",
        "abc.c": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/wait.h>\n\nint main() {\n    pid_t pid = fork();\n    // pid_t pid2 = fork();\n    printf(\"pid : %d\\n\",pid);\n    // printf(\"pid2 : %d\\n\",pid2);\n    if (pid < 0) {\n        // Fork failed\n        perror(\"fork\");\n        exit(1);\n    } else if (pid == 0) {\n        // Child process\n        printf(\"Child process: PID = %d\\n\", getpid());\n\n        // Execute a new program\n        char *args[] = {\"ls\", \"-l\", NULL};\n        execvp(args[0], args);\n\n        // If execvp returns, it must have failed\n        perror(\"execvp\");\n        exit(1);\n    } else {\n        // Parent process\n        printf(\"Parent process: PID = %d, Child PID = %d\\n\", getpid(), pid);\n\n        // Wait for the child to complete\n        int status;\n        // waitpid(pid, &status, 0);\n\n        if (WIFEXITED(status)) {\n            printf(\"Child exited with status %d\\n\", WEXITSTATUS(status));\n        }\n        printf(\"Done\");\n    }\n\n    return 0;\n}\n",
        "answerops2.cpp": "#include<bits/stdc++.h>\nusing namespace std;\n\nvoid setIO(string name = \"\") {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    if (name.size()) {\n        freopen((name + \".in\").c_str(), \"r\", stdin);\n        freopen((name + \".out\").c_str(), \"w\", stdout);\n    }\n}\n\n\nint main() {\n    int n; \n    setIO(\"check\");\n    cin >> n;\n    vector<string> names(n); \n    vector<double> handsomeness(n), intelligence(n), richness(n); \n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i];\n    }\n\n    for (int i = 0; i < n; ++i) {\n        cin >> handsomeness[i];\n    }\n\n    for (int i = 0; i < n; ++i) {\n        cin >> intelligence[i];\n    }\n\n    for (int i = 0; i < n; ++i) {\n        cin >> richness[i];\n    }\n\n    double maxScore = -1.0;\n    string bestGuy;\n\n    for (int i = 0; i < n; ++i) {\n        double totalScore = handsomeness[i] + intelligence[i] + richness[i];\n        if (totalScore > maxScore) {\n            maxScore = totalScore;\n            bestGuy = names[i];\n        }\n    }\n\n    cout << bestGuy << endl;\n\n    return 0;\n}\n",
        "bit_inversions.cpp": "#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    string s;\n    int m = 0;\n    cin >> s;\n    int n = s.length();\n    cin >> m;\n    vector<int> changes(m, 0);\n\n    for(int i = 0;i < m;i++) cin >> changes[i];\n\n    \n\n    return 0;\n}",
        "check.in": "10 9\n8 9\n7 8\n2 3\n9 10\n1 2\n4 5\n3 4\n5 6\n6 7\n",
        "check.out": "9 2\n8 3\n7 3\n6 4\n5 4\n4 4\n3 5\n2 6\n1 10\n",
        "question.cpp": "// #include<bits/stdc++.h>\n// using namespace std;\n// using vi = vector<int>;\n// using vvi = vector<vector<int>>;\n// using pii = pair<int, int>;\n\n// void setIO(string name = \"\") {\n//     ios_base::sync_with_stdio(0);\n//     cin.tie(0);\n//     if (name.size()) {\n//         freopen((name + \".in\").c_str(), \"r\", stdin);\n//         freopen((name + \".out\").c_str(), \"w\", stdout);\n//     }\n// }\n\n// vector<pii> changes = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n\n// bool check(int i, int j, int n){\n//     return !(i >= n || j>= n|| i< 0 || j < 0);\n// }\n\n// void dfs(int i, int j,vvi & grid, vvi &visited){\n//     int n = grid.size();\n//     visited[i][j] = 1;\n//     for(auto const&[xv, xy] : changes){\n//         int nx = xv + i;\n//         int ny = xy + j;\n\n//         if(check(nx, ny, n) && !visited[nx][ny] && grid[nx][ny] == 1){\n//             dfs(nx, ny, grid, visited);\n//         }\n//     }\n// }\n\n// int solve(vvi &grid1, vvi&grid2){\n//     int n = grid1.size();\n\n//     for(int i = 0;i < n;i++){\n//         for(int j = 0;j < n;j++){\n\n//         }\n//     }\n// }\n\n// int main() {\n//     setIO();\n\n\n\n//     return 0;\n// }\n\n#include <iostream>\n#include <vector>\n#include <set>\nusing namespace std;\n\nint rows, cols;\n\nvector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nvoid dfs(vector<vector<int>> &grid, int x, int y, set<pair<int, int>> &region, int baseX, int baseY) {\n    if (x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0)\n        return;\n\n    grid[x][y] = 0;\n\n    region.insert({x - baseX, y - baseY});\n\n    for (auto &[dx, dy] : directions) {\n        dfs(grid, x + dx, y + dy, region, baseX, baseY);\n    }\n}\n\nvector<set<pair<int, int>>> findRegions(vector<vector<int>> &grid) {\n    vector<set<pair<int, int>>> regions;\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                set<pair<int, int>> region;\n                dfs(grid, i, j, region, i, j);\n                regions.push_back(region);\n            }\n        }\n    }\n    return regions;\n}\n\nint countMatchingRegions(vector<vector<int>> grid1, vector<vector<int>> grid2) {\n    auto regions1 = findRegions(grid1);\n    auto regions2 = findRegions(grid2);\n\n    int matches = 0;\n    for (auto &r1 : regions1) {\n        for (auto &r2 : regions2) {\n            if (r1 == r2) {  \n                matches++;\n                break; \n            }\n        }\n    }\n    return matches;\n}\n\n// Driver Code\nint main() {\n    vector<vector<int>> grid1 = {\n        {1, 1, 1},\n        {1, 0, 0},\n        {1, 0, 0}\n    };\n\n    vector<vector<int>> grid2 = {\n        {1, 1, 1},\n        {1, 0, 0},\n        {1, 0, 1}\n    };\n\n    rows = grid1.size();\n    cols = grid1[0].size();\n\n    cout << \"Matching Regions: \" << countMatchingRegions(grid1, grid2) << endl;\n    return 0;\n}"
      }
    },
    {
      "type": "Repository-Detail",
      "data": "Repository Details:\n  Description: None\n  Stars: 0\n  Forks: 0\n  Open Issues: 0\n  Watchers: 0\n\nBranches:\n  main\n"
    },
    {
      "type": "Repository-Structure",
      "data": "|-- .DS_Store\n|-- .vs\n    |-- CSES\n        |-- FileContentIndex\n            |-- 73c19753-a376-4aa7-8847-257e1f376743.vsidx\n            |-- 946da5d7-dab9-403c-bf4b-8a1b74487fdd.vsidx\n        |-- v17\n            |-- .wsuo\n            |-- Browse.VC.db\n            |-- DocumentLayout.json\n            |-- ipch\n                |-- AutoPCH\n                    |-- 17e79b945cb1eb7\n                        |-- WEIRDALGORITHM.ipch\n                    |-- d27458f60f200064\n                        |-- 1.ipch\n    |-- ProjectSettings.json\n    |-- VSWorkspaceState.json\n    |-- slnx.sqlite\n|-- .vscode\n    |-- c_cpp_properties.json\n    |-- settings.json\n|-- 994\n    |-- 1.cpp\n    |-- 2.cpp\n    |-- 3.cpp\n    |-- a.exe\n|-- 995\n    |-- 1.cpp\n    |-- 1.py\n    |-- 2.cpp\n    |-- 3.cpp\n    |-- 4.cpp\n    |-- 4.py\n    |-- 5.cpp\n    |-- a.exe\n|-- 998\n    |-- 1.cpp\n    |-- 2.cpp\n    |-- 3.cpp\n    |-- 4.cpp\n    |-- 5.cpp\n    |-- a.out\n    |-- check.in\n    |-- check.out\n|-- CppProperties.json\n|-- Introduction\n    |-- a.exe\n    |-- a.out\n    |-- bit_strings.cpp\n    |-- ch.exe\n    |-- chess_queen.cpp\n    |-- coin_piles.cpp\n    |-- creating_strings.cpp\n    |-- digit_queries.cpp\n    |-- gray_code.cpp\n    |-- grid_paths.cpp\n    |-- increasing_array.cpp\n    |-- missing_number.cpp\n    |-- number_spiral.cpp\n    |-- palindrom_reorder.cpp\n    |-- permutations.cpp\n    |-- repetitions.cpp\n    |-- string_matching.cpp\n    |-- test_input.txt\n    |-- tower_of_hanoi.cpp\n    |-- trailing_zeros.cpp\n    |-- two_knights.cpp\n    |-- two_set.cpp\n    |-- word_combinations.cpp\n|-- a\n|-- a.out\n|-- abc.c\n|-- additional\n    |-- a.out\n    |-- check.in\n    |-- check.out\n    |-- multi_table.cpp\n|-- answerops2.cpp\n|-- bit_inversions.cpp\n|-- check.in\n|-- check.out\n|-- dp\n    |-- a.out\n    |-- ac_frog_1.cpp\n    |-- check.in\n    |-- check.out\n    |-- dice_comb.cpp\n    |-- increasing_frequency.cpp\n    |-- mortal_combat_tower.cpp\n|-- goodbye2024\n    |-- 1.cpp\n    |-- 1.py\n    |-- 2.cpp\n    |-- 3.cpp\n    |-- 3new.cpp\n    |-- a.out\n    |-- extra2.cpp\n|-- graph\n    |-- a.out\n    |-- building_teams.cpp\n    |-- buildroads.cpp\n    |-- check.in\n    |-- check.out\n    |-- couting_rooms.cpp\n    |-- flight_routes_check.cpp\n|-- maths\n    |-- .DS_Store\n    |-- a.out\n    |-- check.in\n    |-- check.out\n    |-- check_new.in\n    |-- check_new.out\n    |-- couting_divisors.cpp\n    |-- gene.cpp\n    |-- gene.in\n    |-- gene.out\n    |-- somehing.cpp\n|-- misc\n    |-- NusretG\u00f6k\u00e7e.cpp\n    |-- a.exe\n    |-- a.out\n    |-- air_cownditioning.cpp\n    |-- bcount\n        |-- a.exe\n        |-- bcount.cpp\n        |-- bcount.in\n        |-- bcount.out\n    |-- bipartiteness_cf.cpp\n    |-- birthday_party.cpp\n    |-- books.cpp\n    |-- cellular_network.cpp\n    |-- cf_three_logos.cpp\n    |-- check\n        |-- check.in\n        |-- check.out\n    |-- check.in\n    |-- check.out\n    |-- closing\n        |-- a.out\n        |-- closing.cpp\n        |-- closing.in\n        |-- closing.out\n    |-- div7\n        |-- a.exe\n        |-- div7.cpp\n        |-- div7.in\n        |-- div7.out\n    |-- edu173\n        |-- 1.cpp\n        |-- 2.cpp\n        |-- 3.cpp\n        |-- 3.py\n        |-- 4.cpp\n        |-- a.exe\n    |-- fenceplan\n        |-- fenceplan.cpp\n        |-- fenceplan.in\n    |-- gcd_blackboard.cpp\n    |-- good_sub.cpp\n    |-- greg_array.cpp\n    |-- haybale_imp_concept.cpp\n    |-- haybales\n        |-- a.exe\n        |-- haybales.cpp\n        |-- haybales.in\n        |-- haybales.out\n    |-- high_card_low_card.cpp\n    |-- kayaking.cpp\n    |-- lazycow\n        |-- a.exe\n        |-- a.out\n        |-- lazy.cpp\n        |-- lazy.in\n        |-- lazy.out\n    |-- leaping_tak.cpp\n    |-- little_girl_max_sum.cpp\n    |-- max_median_cf.cpp\n    |-- meeting_cant_be_changed.cpp\n    |-- moocast\n        |-- a.out\n        |-- moocast.cpp\n        |-- moocast.in\n        |-- moocast.out\n    |-- moocast_gold\n        |-- a.out\n        |-- moocast.in\n        |-- moocast.out\n        |-- moocast_gold.cpp\n    |-- notlast\n        |-- notlast.cpp\n        |-- notlast.in\n    |-- nuske_vs_phantom.cpp\n    |-- paintbarn\n        |-- a.out\n        |-- paintbarn.cpp\n        |-- paintbarn.in\n        |-- paintbarn.out\n    |-- pairup\n        |-- a.out\n        |-- pairup.cpp\n        |-- pairup.in\n        |-- pairup.out\n    |-- permutator.cpp\n    |-- prep_for_merge.cpp\n    |-- rank_acml_checkgoodsolagain.cpp\n    |-- road_construction.cpp\n    |-- running_miles.cpp\n    |-- solve_maze.cpp\n    |-- somethign.cpp\n    |-- studying_algos.cpp\n    |-- test.out\n    |-- the_party_and_sweets.cpp\n    |-- they_are_every.cpp\n    |-- union_find.cpp\n    |-- usaco\n        |-- a.exe\n        |-- range_sum.cpp\n    |-- where_am_i\n        |-- a.out\n        |-- where_am_i.cpp\n        |-- whereami.in\n        |-- whereami.out\n    |-- wormhole\n        |-- wormhole.cpp\n|-- problem_sets\n    |-- .vscode\n        |-- settings.json\n    |-- MissingNumber\n    |-- MissingNumber.cpp\n    |-- WeirdAlgorithm\n    |-- WeirdAlgorithm.cpp\n    |-- a.out\n    |-- ansh\n    |-- ansh.c\n    |-- compare_strings\n    |-- compare_strings.c\n    |-- cricket.c\n    |-- doc.cpp\n    |-- findmedian.c\n    |-- increasingarray.cpp\n    |-- questions\n    |-- questions.c\n    |-- repitition.cpp\n    |-- something_new\n    |-- something_new.c\n    |-- strings\n    |-- strings.c\n    |-- tests.zip\n|-- question.cpp\n|-- range_queries\n    |-- a.out\n    |-- forest_queries.cpp\n|-- sorting_searching\n    |-- .sum_of_two_vals.cpp.swp\n    |-- SubarrayDivisibility.cpp\n    |-- SubarraySumsII.cpp\n    |-- a.exe\n    |-- a.out\n    |-- array_division.cpp\n    |-- check.in\n    |-- check.out\n    |-- concert_tickets.cpp\n    |-- distinct_number.cpp\n    |-- factory_machines.cpp\n    |-- maximum_subarray_sum.cpp\n    |-- movie_fest_2.cpp\n    |-- movie_festival.cpp\n    |-- room_allocation.cpp\n    |-- subarray_sum1.cpp\n    |-- sum_of_three.cpp\n    |-- sum_of_two_vals.cpp\n    |-- tasks_dead.cpp\n    |-- towers.cpp\n    |-- traffic_lights.cpp"
    },
    {
      "type": "File-Types",
      "data": {
        "DS_Store": 12.5,
        "json": 12.5,
        "c": 12.5,
        "cpp": 37.5,
        "in": 12.5,
        "out": 12.5
      }
    }
  ]
}
