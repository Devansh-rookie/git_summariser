{
  ".gitignore": "*.o\nmain\nbuild/\ntarget\ndist\n",
  ".powconfig.json": "{\n  \"hard_limits\": {\n    \"max-connections\": \"2000\",\n    \"max-requests\": \"2\",\n    \"max-requests-per-connection\": \"334\",\n    \"max-requests-per-connection-keep-alive\": \"223\",\n    \"max-connections-per-ip\": \"112\",\n    \"max-ping-request\": \"23\",\n    \"max-ping-requests-per-browser\": \"345\",\n    \"max-ping-requests-per-curl\": \"3345\"\n  },\n  \"allowed_ip\": [\n    \"1.23.76.98\"\n  ]\n}",
  ".vscode/c_cpp_properties.json": "{\n  \"configurations\": [\n    {\n      \"name\": \"macos-clang-arm64\",\n      \"includePath\": [\n        \"${workspaceFolder}/**\"\n      ],\n      \"compilerPath\": \"/usr/bin/clang\",\n      \"cStandard\": \"${default}\",\n      \"cppStandard\": \"${default}\",\n      \"intelliSenseMode\": \"macos-clang-arm64\",\n      \"compilerArgs\": [\n        \"\"\n      ]\n    }\n  ],\n  \"version\": 4\n}",
  ".vscode/launch.json": "{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"C/C++ Runner: Debug Session\",\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"args\": [],\n      \"cwd\": \"/Users/jaiyankargupta/PoW-Shield/algos/c\",\n      \"program\": \"/Users/jaiyankargupta/PoW-Shield/algos/c/build/Debug/outDebug\"\n    }\n  ]\n}",
  ".vscode/settings.json": "{\n  \"C_Cpp_Runner.cCompilerPath\": \"clang\",\n  \"C_Cpp_Runner.cppCompilerPath\": \"clang++\",\n  \"C_Cpp_Runner.debuggerPath\": \"lldb\",\n  \"C_Cpp_Runner.cStandard\": \"\",\n  \"C_Cpp_Runner.cppStandard\": \"\",\n  \"C_Cpp_Runner.msvcBatchPath\": \"\",\n  \"C_Cpp_Runner.useMsvc\": false,\n  \"C_Cpp_Runner.warnings\": [\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wpedantic\",\n    \"-Wshadow\",\n    \"-Wformat=2\",\n    \"-Wcast-align\",\n    \"-Wconversion\",\n    \"-Wsign-conversion\",\n    \"-Wnull-dereference\"\n  ],\n  \"C_Cpp_Runner.msvcWarnings\": [\n    \"/W4\",\n    \"/permissive-\",\n    \"/w14242\",\n    \"/w14287\",\n    \"/w14296\",\n    \"/w14311\",\n    \"/w14826\",\n    \"/w44062\",\n    \"/w44242\",\n    \"/w14905\",\n    \"/w14906\",\n    \"/w14263\",\n    \"/w44265\",\n    \"/w14928\"\n  ],\n  \"C_Cpp_Runner.enableWarnings\": true,\n  \"C_Cpp_Runner.warningsAsError\": false,\n  \"C_Cpp_Runner.compilerArgs\": [],\n  \"C_Cpp_Runner.linkerArgs\": [],\n  \"C_Cpp_Runner.includePaths\": [],\n  \"C_Cpp_Runner.includeSearch\": [\n    \"*\",\n    \"**/*\"\n  ],\n  \"C_Cpp_Runner.excludeSearch\": [\n    \"**/build\",\n    \"**/build/**\",\n    \"**/.*\",\n    \"**/.*/**\",\n    \"**/.vscode\",\n    \"**/.vscode/**\"\n  ],\n  \"C_Cpp_Runner.useAddressSanitizer\": false,\n  \"C_Cpp_Runner.useUndefinedSanitizer\": false,\n  \"C_Cpp_Runner.useLeakSanitizer\": false,\n  \"C_Cpp_Runner.showCompilationTime\": false,\n  \"C_Cpp_Runner.useLinkTimeOptimization\": false,\n  \"C_Cpp_Runner.msvcSecureNoWarnings\": false,\n  \"files.associations\": {\n        \"queue\": \"cpp\",\n        \"unordered_map\": \"cpp\"\n    }\n}",
  "Dockerfile": "FROM ubuntu:latest\n\nRUN apt-get update && apt-get install -y g++\n\nWORKDIR /app\n\nCOPY ./firewall/main.cpp /app\n\nRUN g++ -o main main.cpp\n\nCMD [\"./main\"]\n",
  "algos/c/main.c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <stdbool.h>\n\n#define PORT 8081\n#define BUFFER_SIZE 1024\n\nbool user_agent(struct sockaddr_in *address,char *buffer){\n    if(strstr(buffer,\"not found\") != NULL){\n        return true;\n    }\n    else return false; \n}\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE] = {0};\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Attaching socket to the port 8081\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {\n        perror(\"setsockopt failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Binding the socket to the address\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        perror(\"Bind failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Start listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"Listen failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    while (1) {\n        printf(\"C analyzer waiting for a connection...\\n\");\n        if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"Accept failed\");\n            exit(EXIT_FAILURE);\n        }\n        printf(\"C analyzer: Connection established.\\n\");\n\n        read(new_socket, buffer, BUFFER_SIZE);\n        printf(\"C analyzer received: %s\\n\", buffer);\n\n        // check the usr agent here\n        printf(\"\\n %d \\n\",user_agent(new_socket, buffer));\n\n        // Mock response as \"safe\"\n        send(new_socket, \"safe\", strlen(\"safe\"), 0);\n        printf(\"C analyzer: Response sent as 'safe'.\\n\");\n\n        close(new_socket);\n    }\n\n    return 0;\n}\n",
  "algos/rust/.gitignore": "/target\n",
  "algos/rust/Cargo.lock": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"DDoS-Algos\"\nversion = \"0.1.0\"\ndependencies = [\n \"csv\",\n \"env_logger\",\n \"hyper\",\n \"log\",\n \"rand\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"smartcore\",\n \"tokio\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e4503c46a5c0c7844e948c9a4d6acd9f50cccb4de1c48eb9e291ea17470c678\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.73\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cc23269a4f8976d0a4d2e7109211a419fe30e8d88d677cd60b6bc79c5732e0a\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8318a53db07bb3f8dca91a600466bdb3f2eaadeedfdbcf02e1accbad9271ba50\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57b6a275aa2903740dc87da01c62040406b8812552e97129a63ea8850a17c6e6\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"csv\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac574ff4d437a7b5ad237ef331c17ccca63c46479e5b5453eb8e10bb99a759fe\"\ndependencies = [\n \"csv-core\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"csv-core\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5efa2b3d7902f4b634a20cae3c9c4e6209dc4779feb6863329607560143efa70\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580\"\ndependencies = [\n \"humantime\",\n \"is-terminal\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78\"\ndependencies = [\n \"futures-core\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d\"\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"pin-project-lite\",\n \"pin-utils\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"wasi\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40ecd4077b5ae9fd2e9e169b102c6c330d0605168eb0e8bf79952b256dbefffd\"\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http\",\n \"indexmap\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\"\n\n[[package]]\nname = \"http\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fcc0b4a115bf80b728eb8ea024ad5bd707b615bfed49e0665b6e0f86fd082d9\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a152ddd61dfaec7273fe8419ab357f33aee0d914c5f4efbf0d96fa749eea5ec9\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68b900aa2f7301e21c36462b170ee99994de34dff39a4a6a528e80e7376d07e5\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b\"\ndependencies = [\n \"hermit-abi 0.4.0\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.70\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1868808506b929d7b0cfa8f75951347aa71bb21144b7791bae35d9bccfcfe37a\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80e04d1dcff3aae0704555fe5fee3bcfaf3d1fdf8a7e521d5b9d2b42acb52cec\"\ndependencies = [\n \"hermit-abi 0.3.9\",\n \"libc\",\n \"wasi\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"num\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35bd024e8b2ff75562e5f34e7f4905839deb4b22955ef5e73d2fea1b9813cb23\"\ndependencies = [\n \"num-bigint\",\n \"num-complex\",\n \"num-integer\",\n \"num-iter\",\n \"num-rational\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-complex\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73f88a1307638156682bada9d7604135552957b7818057dcef22705b4d509495\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-iter\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1429034a0490724d0075ebb2bc9e875d6503c3cf69e235a8941aa757d83ef5bf\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f83d14da390562dca69fc84082e73e548e1ad308d24accdedd2720017cb37824\"\ndependencies = [\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"084f1a5821ac4c651660a94a7153d27ac9d8a53736203f58b31945ded098070a\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rand_distr\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32cb0b9bc82b0a0876c2dd994a7e7a2683d3e7390ca40e6886785ef0c7e3ee31\"\ndependencies = [\n \"num-traits\",\n \"rand\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a908a6e00f1fdd0dfd9c0eb08ce85126f6d8bbda50017e74bc4a4b7d4a926a4\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4219d74c6b67a3654a9fbebc4b419e22126d13d2f3c4a07ee0cb61ff79a79619\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a66a03ae7c801facd77a29370b4faec201768915ac14a721ba36f20bc9c209b\"\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"smartcore\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db8b735ef68af5b50325b68cedc63f54ff7a876c18cc3878954dabe36ecd94e1\"\ndependencies = [\n \"getrandom\",\n \"num\",\n \"num-traits\",\n \"rand\",\n \"rand_distr\",\n]\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce305eb0b4296696835b71df73eb912e0f1ffd2556a501fcede6e0c50349191c\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.77\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f35bcdf61fd8e7be6caf75f429fdca8beb3ed76584befb503b1569faee373ed\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"tokio\"\nversion = \"1.40.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2b070231665d27ad9ec9b8df639893f46727666c6767db40317fbe920a5d998\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"693d596312e88961bc67d7f1f97af8a70227d9f90c31bba5806eec004978d752\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9cf6b47b3771c49ac75ad09a6162f53ad4b8088b76ac60e8ec1455b31a189fe1\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a82edfc16a6c469f5f44dc7b571814045d60404b55a0ee849f9bcfa2e63dd9b5\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9de396da306523044d3302746f1208fa71d7532227f15e347e2d93e4145dd77b\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"585c4c91a46b072c92e908d99cb1dcdf95c5218eeb6f3bf1efa991ee7a68cccf\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afc340c74d9005395cf9dd098506f7f44e38f2b4a21c6aaacf9a105ea5e1e836\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c62a0a307cb4a311d3a07867860911ca130c3494e8c2719593806c08bc5d0484\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n",
  "algos/rust/Cargo.toml": "[package]\nname = \"DDoS-Algos\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\ncsv = \"1.1.6\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_derive = \"1.0\"\nsmartcore = \"0.2.0\"\nlog = \"0.4\"\nenv_logger = \"0.10\"\nserde_json = \"1.0\"\nhyper = { version = \"0.14\", features = [\"full\"] }\ntokio = { version = \"1\", features = [\"full\"] }\nrand = \"0.8.5\"\n",
  "algos/rust/output.json": "{\n  \"10.0.0.1\": {\n    \"Details\": \"{\\\"Browser\\\":\\\"Firefox\\\",\\\"Request Count\\\":\\\"42\\\",\\\"Response Time (ms)\\\":\\\"720\\\",\\\"DDoS Happening\\\":\\\"NoDDoS\\\",\\\"Status Code\\\":\\\"403\\\",\\\"HTTP Method\\\":\\\"OPTIONS\\\",\\\"Timestamp\\\":\\\"17251488473N\\\"}\"\n  },\n  \"127.0.0.1\": {\n    \"Details\": \"{\\\"Status Code\\\":\\\"403\\\",\\\"Response Time (ms)\\\":\\\"825\\\",\\\"Request Count\\\":\\\"79\\\",\\\"DDoS Happening\\\":\\\"NoDDoS\\\",\\\"Browser\\\":\\\"Chrome\\\",\\\"Timestamp\\\":\\\"17251488473N\\\",\\\"HTTP Method\\\":\\\"POST\\\"}\"\n  },\n  \"172.16.0.1\": {\n    \"Details\": \"{\\\"HTTP Method\\\":\\\"HEAD\\\",\\\"Request Count\\\":\\\"65\\\",\\\"Status Code\\\":\\\"301\\\",\\\"Response Time (ms)\\\":\\\"510\\\",\\\"Browser\\\":\\\"Opera\\\",\\\"DDoS Happening\\\":\\\"NoDDoS\\\",\\\"Timestamp\\\":\\\"17251488473N\\\"}\"\n  },\n  \"192.168.0.1\": {\n    \"Details\": \"{\\\"Response Time (ms)\\\":\\\"393\\\",\\\"DDoS Happening\\\":\\\"NoDDoS\\\",\\\"Request Count\\\":\\\"47\\\",\\\"Browser\\\":\\\"Edge\\\",\\\"HTTP Method\\\":\\\"GET\\\",\\\"Timestamp\\\":\\\"17251488473N\\\",\\\"Status Code\\\":\\\"502\\\"}\"\n  },\n  \"198.51.100.0\": {\n    \"Details\": \"{\\\"HTTP Method\\\":\\\"POST\\\",\\\"Timestamp\\\":\\\"17251488523N\\\",\\\"Request Count\\\":\\\"309\\\",\\\"Response Time (ms)\\\":\\\"2240\\\",\\\"Browser\\\":\\\"Firefox\\\",\\\"DDoS Happening\\\":\\\"DDOS\\\",\\\"Status Code\\\":\\\"502\\\"}\"\n  },\n  \"203.0.113.0\": {\n    \"Details\": \"{\\\"Timestamp\\\":\\\"17251488523N\\\",\\\"HTTP Method\\\":\\\"GET\\\",\\\"Request Count\\\":\\\"67\\\",\\\"Browser\\\":\\\"NOT-FOUND\\\",\\\"Status Code\\\":\\\"404\\\",\\\"Response Time (ms)\\\":\\\"713\\\",\\\"DDoS Happening\\\":\\\"NoDDoS\\\"}\"\n  }\n}\n",
  "algos/rust/src/main.rs": "extern crate csv;\nextern crate env_logger;\nextern crate log;\nextern crate serde;\nextern crate smartcore;\nextern crate hyper;\nextern crate tokio;\n\n#[macro_use]\nextern crate serde_derive;\n\nuse std::io::{Read};\n\nuse hyper::{Body, Request, Response, Server, Method, StatusCode};\nuse hyper::service::{make_service_fn, service_fn};\nuse smartcore::ensemble::random_forest_classifier::*;\nuse smartcore::linalg::naive::dense_matrix::DenseMatrix;\nuse smartcore::metrics::*;\nuse std::collections::HashSet;\nuse std::error::Error;\nuse std::process;\n\nuse std::fs::File;\nuse std::env;\n\nuse rand::Rng;\nuse std::collections::HashMap;\nuse serde_json::json;\n\n#[derive(Debug, Deserialize, Serialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    #[serde(rename = \"Timestamp\")]\n    timestamp: Option<String>, // Handle missing or malformed data\n    #[serde(rename = \"IP Address\")]\n    ip_address: String,\n    browser: String,\n    #[serde(rename = \"Request Count\")]\n    request_count: u32,\n    #[serde(rename = \"HTTP Method\")]\n    http_method: String,\n    #[serde(rename = \"Status Code\")]\n    status_code: u32,\n    #[serde(rename = \"Response Time (ms)\")]\n    response_time_ms: u32,\n    #[serde(rename = \"DDoS Happening\")]\n    ddos_happening: String, // This field is for classification\n}\n\nfn run_ml() -> Result<(), Box<dyn Error>> {\n    // Initialize the logger\n    env_logger::init();\n\n    let file_path = \"../../ddos_data.csv\";\n    let mut rdr = csv::Reader::from_path(file_path)?;\n    println!(\"Reading data from {}\", file_path);\n\n    let mut data = Vec::new();\n    let mut labels = Vec::new();\n\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"Processing record: {:?}\", record);\n\n        let browser = match record.browser.as_str() {\n            \"Safari\" => 0.0,\n            \"Chrome\" => 1.0,\n            \"Opera\" => 2.0,\n            _ => 3.0,\n        };\n\n        let http_method = match record.http_method.as_str() {\n            \"GET\" => 0.0,\n            \"POST\" => 1.0,\n            \"HEAD\" => 2.0,\n            \"OPTIONS\" => 3.0,\n            _ => 4.0,\n        };\n\n        let ddos_label = match record.ddos_happening.as_str() {\n            \"NoDDoS\" => \"NoDDoS\".to_string(),\n            \"DDoS\" | \"DDOS\" => \"DDoS\".to_string(), // Handle both variations\n            _ => {\n                println!(\n                    \"Skipping record with unknown DDoS label: {}\",\n                    record.ddos_happening\n                );\n                continue;\n            }\n        };\n\n        let row = vec![\n            record.request_count as f64,\n            record.status_code as f64,\n            browser,\n            http_method,\n        ];\n        data.push(row);\n        labels.push(ddos_label);\n    }\n\n    if data.is_empty() || labels.is_empty() {\n        println!(\"No data found in CSV or labels are empty.\");\n        return Ok(());\n    }\n\n    // Print unique labels to debug\n    let unique_labels: HashSet<String> = labels.iter().cloned().collect();\n    println!(\"Unique labels: {:?}\", unique_labels);\n\n    // Check if we have at least 2 classes\n    if unique_labels.len() < 2 {\n        println!(\n            \"Error: Not enough unique classes for classification. Found {} unique classes.\",\n            unique_labels.len()\n        );\n        return Ok(());\n    }\n\n    let nrows = data.len();\n    let ncols = data[0].len();\n    let data = data.into_iter().flatten().collect::<Vec<f64>>();\n    let data = DenseMatrix::from_vec(nrows, ncols, &data);\n\n    let y = labels\n        .into_iter()\n        .filter_map(|label| match label.as_str() {\n            \"NoDDoS\" => Some(0.0),\n            \"DDoS\" => Some(1.0),\n            _ => {\n                println!(\"Error: Unexpected label: {}\", label);\n                None\n            }\n        })\n        .collect::<Vec<f64>>();\n\n    println!(\"Training Random Forest Classifier...\");\n    let rfc = RandomForestClassifier::fit(&data, &y, Default::default())?;\n\n    let y_hat = rfc.predict(&data)?;\n    let accuracy = accuracy(&y, &y_hat);\n    println!(\"Model accuracy: {}\", accuracy);\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n    let args: Vec<String> = env::args().collect();\n\n    if args.len() < 2 {\n        println!(\"Please provide an argument: 'ml' or 'server'\");\n        process::exit(1);\n    }\n\n    let result = match args[1].as_str() {\n        \"ml\" => run_ml(),\n        \"server\" => run_server().await,\n        _ => {\n            println!(\"Invalid argument. Please provide 'ml' or 'server'\");\n            process::exit(1);\n        }\n    };\n\n    if let Err(err) = result {\n        println!(\"Application error: {}\", err);\n        process::exit(1);\n    }\n}\n\nasync fn handle_request(req: Request<Body>) -> Result<Response<Body>, hyper::Error> {\n    let path = req.uri().path();\n\n    if req.method() == Method::GET {\n        match path {\n            \"/\" => {\n                let html_path = \"static/index.html\"; // Update with the correct path\n                let mut file = File::open(html_path).expect(\"Unable to open file\");\n                let mut contents = String::new();\n                file.read_to_string(&mut contents).expect(\"Unable to read file\");\n\n                Ok(Response::builder()\n                    .header(\"Content-Type\", \"text/html\")\n                    .body(Body::from(contents))\n                    .unwrap())\n            },\n            \"/styles.css\" => {\n                let css_path = \"static/styles.css\"; // Update with the correct path\n                let mut file = File::open(css_path).expect(\"Unable to open file\");\n                let mut contents = String::new();\n                file.read_to_string(&mut contents).expect(\"Unable to read file\");\n\n                Ok(Response::builder()\n                    .header(\"Content-Type\", \"text/css\")\n                    .body(Body::from(contents))\n                    .unwrap())\n            },\n            \"/script.js\" => {\n                let js_path = \"static/script.js\"; // Update with the correct path\n                let mut file = File::open(js_path).expect(\"Unable to open file\");\n                let mut contents = String::new();\n                file.read_to_string(&mut contents).expect(\"Unable to read file\");\n\n                Ok(Response::builder()\n                    .header(\"Content-Type\", \"application/javascript\")\n                    .body(Body::from(contents))\n                    .unwrap())\n            },\n            \"/pow\" => {\n                // Handle proof-of-work challenge\n                let question = generate_random_question();\n                let response_body = json!({\n                    \"question\": question\n                }).to_string();\n\n                Ok(Response::builder()\n                    .header(\"Content-Type\", \"application/json\")\n                    .body(Body::from(response_body))\n                    .unwrap())\n            },\n            \"/check\" => {\n                // Handle proof-of-work check\n                let body = hyper::body::to_bytes(req.into_body()).await?;\n                let body_str = std::str::from_utf8(&body).unwrap();\n                let body_json: serde_json::Value = serde_json::from_str(body_str).unwrap(); // Explicitly specify the type\n                let answer = body_json[\"answer\"].as_str().unwrap();\n\n                let is_valid = check_proof_of_work(answer);\n                let response_body = json!({\n                    \"valid\": is_valid\n                }).to_string();\n\n                Ok(Response::builder()\n                    .header(\"Content-Type\", \"application/json\")\n                    .body(Body::from(response_body))\n                    .unwrap())\n            },\n            _ => {\n                Ok(Response::builder()\n                    .status(StatusCode::NOT_FOUND)\n                    .body(Body::from(\"Not Found\"))\n                    .unwrap())\n            },\n        }\n    } else {\n        Ok(Response::builder()\n            .status(StatusCode::METHOD_NOT_ALLOWED)\n            .body(Body::from(\"Method Not Allowed\"))\n            .unwrap())\n    }\n}\n\nfn generate_random_question() -> String {\n    let mut rng = rand::thread_rng();\n    let num1: i32 = rng.gen_range(1..10);\n    let num2: i32 = rng.gen_range(1..10);\n\n    format!(\"What is {} + {}?\", num1, num2)\n}\n\nfn check_proof_of_work(answer: &str) -> bool {\n    let parts: Vec<&str> = answer.split_whitespace().collect();\n    if parts.len() != 3 {\n        return false;\n    }\n\n    let num1: i32 = parts[0].parse().unwrap();\n    let num2: i32 = parts[2].parse().unwrap();\n    let result: i32 = parts[4].parse().unwrap();\n\n    num1 + num2 == result\n}\n\nasync fn run_server() -> Result<(), Box<dyn std::error::Error>> {\n    let make_svc = make_service_fn(|_conn| async { Ok::<_, hyper::Error>(service_fn(handle_request)) });\n\n    let addr = ([127, 0, 0, 1], 3000).into();\n    let server = Server::bind(&addr).serve(make_svc);\n\n    println!(\"Listening on http://{}\", addr);\n\n    server.await?;\n\n    Ok(())\n}\n",
  "algos/rust/static/index.html": "<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>DDoS Data Statistics</title>\n        <link rel=\"stylesheet\" href=\"styles.css\" />\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>DDoS Data Statistics</h1>\n            <table>\n                <thead>\n                    <tr>\n                        <th>IP Address</th>\n                        <th>Timestamp</th>\n                        <th>Browser</th>\n                        <th>Request Count</th>\n                        <th>HTTP Method</th>\n                        <th>Status Code</th>\n                        <th>Response Time (ms)</th>\n                        <th>DDoS Happening</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- Rows will be dynamically generated -->\n                </tbody>\n            </table>\n        </div>\n        <script src=\"script.js\"></script>\n    </body>\n</html>\n",
  "algos/rust/static/script.js": "document.addEventListener(\"DOMContentLoaded\", function () {\n  const data = {\n    \"10.0.0.1\": {\n      Details:\n        '{\"Browser\":\"Firefox\",\"Request Count\":\"42\",\"Response Time (ms)\":\"720\",\"DDoS Happening\":\"NoDDoS\",\"Status Code\":\"403\",\"HTTP Method\":\"OPTIONS\",\"Timestamp\":\"17251488473N\"}',\n    },\n    \"127.0.0.1\": {\n      Details:\n        '{\"Status Code\":\"403\",\"Response Time (ms)\":\"825\",\"Request Count\":\"79\",\"DDoS Happening\":\"NoDDoS\",\"Browser\":\"Chrome\",\"Timestamp\":\"17251488473N\",\"HTTP Method\":\"POST\"}',\n    },\n    \"172.16.0.1\": {\n      Details:\n        '{\"HTTP Method\":\"HEAD\",\"Request Count\":\"65\",\"Status Code\":\"301\",\"Response Time (ms)\":\"510\",\"Browser\":\"Opera\",\"DDoS Happening\":\"NoDDoS\",\"Timestamp\":\"17251488473N\"}',\n    },\n    \"192.168.0.1\": {\n      Details:\n        '{\"Response Time (ms)\":\"393\",\"DDoS Happening\":\"NoDDoS\",\"Request Count\":\"47\",\"Browser\":\"Edge\",\"HTTP Method\":\"GET\",\"Timestamp\":\"17251488473N\",\"Status Code\":\"502\"}',\n    },\n    \"198.51.100.0\": {\n      Details:\n        '{\"HTTP Method\":\"POST\",\"Timestamp\":\"17251488523N\",\"Request Count\":\"309\",\"Response Time (ms)\":\"2240\",\"Browser\":\"Firefox\",\"DDoS Happening\":\"DDOS\",\"Status Code\":\"502\"}',\n    },\n    \"203.0.113.0\": {\n      Details:\n        '{\"Timestamp\":\"17251488523N\",\"HTTP Method\":\"GET\",\"Request Count\":\"67\",\"Browser\":\"NOT-FOUND\",\"Status Code\":\"404\",\"Response Time (ms)\":\"713\",\"DDoS Happening\":\"NoDDoS\"}',\n    },\n\n    // Add more IPs here...\n  };\n\n  const tbody = document.querySelector(\"tbody\");\n\n  for (const ip in data) {\n    if (data.hasOwnProperty(ip)) {\n      const details = JSON.parse(data[ip].Details);\n      const row = document.createElement(\"tr\");\n\n      row.innerHTML = `\n                <td>${ip}</td>\n                <td>${details.Timestamp}</td>\n                <td>${details.Browser}</td>\n                <td>${details[\"Request Count\"]}</td>\n                <td>${details[\"HTTP Method\"]}</td>\n                <td>${details[\"Status Code\"]}</td>\n                <td>${details[\"Response Time (ms)\"]}</td>\n                <td>${details[\"DDoS Happening\"]}</td>\n            `;\n\n      tbody.appendChild(row);\n    }\n  }\n});\n",
  "algos/rust/static/styles.css": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 20px;\n}\n\n.container {\n    max-width: 1000px;\n    margin: 0 auto;\n    background: #fff;\n    padding: 20px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 25px 0;\n    font-size: 0.9em;\n    background-color: #fafafa;\n}\n\ntable th,\ntable td {\n    padding: 12px 15px;\n    border: 1px solid #ddd;\n    text-align: center;\n}\n\ntable th {\n    background-color: #2c3e50;\n    color: #fff;\n}\n\ntable tbody tr:nth-child(even) {\n    background-color: #f2f2f2;\n}\n",
  "build.sh": "#!/bin/bash\n\n# Function to check if a command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Check for GCC\nif ! command_exists gcc; then\n    echo \"GCC is not installed. Installing...\"\n    sudo apt-get update\n    sudo apt-get install -y build-essential\nfi\n\n# Check for Cargo\nif ! command_exists cargo; then\n    echo \"Cargo is not installed. Installing...\"\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    # Add Rust to PATH\n    export PATH=\"$HOME/.cargo/bin:$PATH\"\nfi\n\n# Compile Firewall\nif [ -f firewall/main.c ]; then\n    echo \"Compiling Firewall...\"\n    cd firewall\n    gcc main.c -o firewall\n    echo \"Firewall compiled\"\n    cd ..\nelse\n    echo \"Firewall source file not found.\"\n    exit 1\nfi\n\n# Compile C Analyzer\nif [ -f algos/c/main.c ]; then\n    echo \"Compiling C Analyzer...\"\n    cd algos/c\n    gcc main.c -o algoc\n    echo \"C Analyzer compiled\"\n    cd ../..\nelse\n    echo \"C Analyzer source file not found.\"\n    exit 1\nfi\n\n# Build Rust Analyzer\nif [ -d algos/rust ] && [ -f algos/rust/Cargo.toml ]; then\n    echo \"Building Rust Analyzer...\"\n    cd algos/rust\n    cargo build --release\n    echo \"Rust Analyzer built\"\n    cd ../..\nelse\n    echo \"Rust project directory or Cargo.toml not found.\"\n    exit 1\nfi\n",
  "config/.gitignore": "node_modules\ntemp",
  "config/index.js": "import inquirer from \"inquirer\";\nimport * as fs from \"fs\";\nimport chalk from \"chalk\";\n\nconsole.log(chalk.green(\"\\nSet the Configurations: \\n\\n\"));\n\nconst data = fs.readFileSync(\"../.powconfig.json\", \"utf8\");\nconst json_data = JSON.parse(data);\n\nconst questions = [];\n\nconst hardlimits = json_data.hard_limits;\n\nfor (const [key, value] of Object.entries(hardlimits)) {\n  questions.push({\n    type: \"input\",\n    name: key,\n    message: `set config for ${key}`,\n    default: value,\n  });\n}\n\n// Prompt the user\ninquirer\n  .prompt(questions)\n  .then((answers) => {\n    for (const [key, value] of Object.entries(answers)) {\n      json_data.hard_limits[key] = value;\n    }\n\n    // Ask the user if they want to set or delete the allowed_ip\n    inquirer\n      .prompt({\n        type: \"list\",\n        name: \"action\",\n        message: \"Do you want to set or delete the allowed_ip?\",\n        choices: [\"Set\", \"Delete\"],\n      })\n      .then((answer) => {\n        if (answer.action === \"Set\") {\n          // Ask the user to enter the new allowed_ip value\n          inquirer\n            .prompt({\n              type: \"input\",\n              name: \"allowed_ip\",\n              message: \"Enter the new allowed_ip value:\",\n              default: json_data.allowed_ip[0],\n            })\n            .then((answer) => {\n              // Update the value of allowed_ip\n              json_data.allowed_ip = [answer.allowed_ip];\n\n              // Write the updated data back to powconfig.json\n              fs.writeFileSync(\n                \"../.powconfig.json\",\n                JSON.stringify(json_data, null, 2)\n              );\n\n              console.log(\"allowed_ip set successfully!\");\n            })\n            .catch((error) => {\n              console.error(\"Error:\", error);\n            });\n        } else if (answer.action === \"Delete\") {\n          // Delete the allowed_ip from the json_data\n          delete json_data.allowed_ip;\n\n          // Write the updated data back to powconfig.json\n          fs.writeFileSync(\n            \"../.powconfig.json\",\n            JSON.stringify(json_data, null, 2)\n          );\n\n          console.log(\"allowed_ip deleted successfully!\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  })\n  .catch((error) => {\n    console.error(\"Error:\", error);\n  });\n",
  "config/package-lock.json": "{\n  \"name\": \"pow-shield\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"pow-shield\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"chalk\": \"^5.3.0\",\n        \"inquirer\": \"^10.1.8\"\n      },\n      \"bin\": {\n        \"pow-shield\": \"index.js\"\n      }\n    },\n    \"node_modules/@inquirer/checkbox\": {\n      \"version\": \"2.4.7\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/checkbox/-/checkbox-2.4.7.tgz\",\n      \"integrity\": \"sha512-5YwCySyV1UEgqzz34gNsC38eKxRBtlRDpJLlKcRtTjlYA/yDKuc1rfw+hjw+2WJxbAZtaDPsRl5Zk7J14SBoBw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/figures\": \"^1.0.5\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"ansi-escapes\": \"^4.3.2\",\n        \"yoctocolors-cjs\": \"^2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/confirm\": {\n      \"version\": \"3.1.22\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/confirm/-/confirm-3.1.22.tgz\",\n      \"integrity\": \"sha512-gsAKIOWBm2Q87CDfs9fEo7wJT3fwWIJfnDGMn9Qy74gBnNFOACDNfhUzovubbJjWnKLGBln7/NcSmZwj5DuEXg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/type\": \"^1.5.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/core\": {\n      \"version\": \"9.0.10\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/core/-/core-9.0.10.tgz\",\n      \"integrity\": \"sha512-TdESOKSVwf6+YWDz8GhS6nKscwzkIyakEzCLJ5Vh6O3Co2ClhCJ0A4MG909MUWfaWdpJm7DE45ii51/2Kat9tA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/figures\": \"^1.0.5\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"@types/mute-stream\": \"^0.0.4\",\n        \"@types/node\": \"^22.1.0\",\n        \"@types/wrap-ansi\": \"^3.0.0\",\n        \"ansi-escapes\": \"^4.3.2\",\n        \"cli-spinners\": \"^2.9.2\",\n        \"cli-width\": \"^4.1.0\",\n        \"mute-stream\": \"^1.0.0\",\n        \"signal-exit\": \"^4.1.0\",\n        \"strip-ansi\": \"^6.0.1\",\n        \"wrap-ansi\": \"^6.2.0\",\n        \"yoctocolors-cjs\": \"^2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/editor\": {\n      \"version\": \"2.1.22\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/editor/-/editor-2.1.22.tgz\",\n      \"integrity\": \"sha512-K1QwTu7GCK+nKOVRBp5HY9jt3DXOfPGPr6WRDrPImkcJRelG9UTx2cAtK1liXmibRrzJlTWOwqgWT3k2XnS62w==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"external-editor\": \"^3.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/expand\": {\n      \"version\": \"2.1.22\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/expand/-/expand-2.1.22.tgz\",\n      \"integrity\": \"sha512-wTZOBkzH+ItPuZ3ZPa9lynBsdMp6kQ9zbjVPYEtSBG7UulGjg2kQiAnUjgyG4SlntpTce5bOmXAPvE4sguXjpA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"yoctocolors-cjs\": \"^2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/figures\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.5.tgz\",\n      \"integrity\": \"sha512-79hP/VWdZ2UVc9bFGJnoQ/lQMpL74mGgzSYX1xUqCVk7/v73vJCMw1VuyWN1jGkZ9B3z7THAbySqGbCNefcjfA==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/input\": {\n      \"version\": \"2.2.9\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/input/-/input-2.2.9.tgz\",\n      \"integrity\": \"sha512-7Z6N+uzkWM7+xsE+3rJdhdG/+mQgejOVqspoW+w0AbSZnL6nq5tGMEVASaYVWbkoSzecABWwmludO2evU3d31g==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/type\": \"^1.5.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/number\": {\n      \"version\": \"1.0.10\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/number/-/number-1.0.10.tgz\",\n      \"integrity\": \"sha512-kWTxRF8zHjQOn2TJs+XttLioBih6bdc5CcosXIzZsrTY383PXI35DuhIllZKu7CdXFi2rz2BWPN9l0dPsvrQOA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/type\": \"^1.5.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/password\": {\n      \"version\": \"2.1.22\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/password/-/password-2.1.22.tgz\",\n      \"integrity\": \"sha512-5Fxt1L9vh3rAKqjYwqsjU4DZsEvY/2Gll+QkqR4yEpy6wvzLxdSgFhUcxfDAOtO4BEoTreWoznC0phagwLU5Kw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"ansi-escapes\": \"^4.3.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/prompts\": {\n      \"version\": \"5.3.8\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/prompts/-/prompts-5.3.8.tgz\",\n      \"integrity\": \"sha512-b2BudQY/Si4Y2a0PdZZL6BeJtl8llgeZa7U2j47aaJSCeAl1e4UI7y8a9bSkO3o/ZbZrgT5muy/34JbsjfIWxA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/checkbox\": \"^2.4.7\",\n        \"@inquirer/confirm\": \"^3.1.22\",\n        \"@inquirer/editor\": \"^2.1.22\",\n        \"@inquirer/expand\": \"^2.1.22\",\n        \"@inquirer/input\": \"^2.2.9\",\n        \"@inquirer/number\": \"^1.0.10\",\n        \"@inquirer/password\": \"^2.1.22\",\n        \"@inquirer/rawlist\": \"^2.2.4\",\n        \"@inquirer/search\": \"^1.0.7\",\n        \"@inquirer/select\": \"^2.4.7\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/rawlist\": {\n      \"version\": \"2.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/rawlist/-/rawlist-2.2.4.tgz\",\n      \"integrity\": \"sha512-pb6w9pWrm7EfnYDgQObOurh2d2YH07+eDo3xQBsNAM2GRhliz6wFXGi1thKQ4bN6B0xDd6C3tBsjdr3obsCl3Q==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"yoctocolors-cjs\": \"^2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/search\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/search/-/search-1.0.7.tgz\",\n      \"integrity\": \"sha512-p1wpV+3gd1eST/o5N3yQpYEdFNCzSP0Klrl+5bfD3cTTz8BGG6nf4Z07aBW0xjlKIj1Rp0y3x/X4cZYi6TfcLw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/figures\": \"^1.0.5\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"yoctocolors-cjs\": \"^2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/select\": {\n      \"version\": \"2.4.7\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/select/-/select-2.4.7.tgz\",\n      \"integrity\": \"sha512-JH7XqPEkBpNWp3gPCqWqY8ECbyMoFcCZANlL6pV9hf59qK6dGmkOlx1ydyhY+KZ0c5X74+W6Mtp+nm2QX0/MAQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/core\": \"^9.0.10\",\n        \"@inquirer/figures\": \"^1.0.5\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"ansi-escapes\": \"^4.3.2\",\n        \"yoctocolors-cjs\": \"^2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@inquirer/type\": {\n      \"version\": \"1.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/type/-/type-1.5.2.tgz\",\n      \"integrity\": \"sha512-w9qFkumYDCNyDZmNQjf/n6qQuvQ4dMC3BJesY4oF+yr0CxR5vxujflAVeIcS6U336uzi9GM0kAfZlLrZ9UTkpA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mute-stream\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@types/mute-stream\": {\n      \"version\": \"0.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/@types/mute-stream/-/mute-stream-0.0.4.tgz\",\n      \"integrity\": \"sha512-CPM9nzrCPPJHQNA9keH9CVkVI+WR5kMa+7XEs5jcGQ0VoAGnLv242w8lIVgwAEfmE4oufJRaTc9PNLQl0ioAow==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@types/node\": \"*\"\n      }\n    },\n    \"node_modules/@types/node\": {\n      \"version\": \"22.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-22.5.1.tgz\",\n      \"integrity\": \"sha512-KkHsxej0j9IW1KKOOAA/XBA0z08UFSrRQHErzEfA3Vgq57eXIMYboIlHJuYIfd+lwCQjtKqUu3UnmKbtUc9yRw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"undici-types\": \"~6.19.2\"\n      }\n    },\n    \"node_modules/@types/wrap-ansi\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@types/wrap-ansi/-/wrap-ansi-3.0.0.tgz\",\n      \"integrity\": \"sha512-ltIpx+kM7g/MLRZfkbL7EsCEjfzCcScLpkg37eXEtx5kmrAKBkTJwd1GIAjDSL8wTpM6Hzn5YO4pSb91BEwu1g==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/ansi-escapes\": {\n      \"version\": \"4.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz\",\n      \"integrity\": \"sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"type-fest\": \"^0.21.3\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/ansi-regex\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n      \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/ansi-styles\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-convert\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n      }\n    },\n    \"node_modules/chalk\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz\",\n      \"integrity\": \"sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/chardet\": {\n      \"version\": \"0.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz\",\n      \"integrity\": \"sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/cli-spinners\": {\n      \"version\": \"2.9.2\",\n      \"resolved\": \"https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz\",\n      \"integrity\": \"sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/cli-width\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz\",\n      \"integrity\": \"sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==\",\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">= 12\"\n      }\n    },\n    \"node_modules/color-convert\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-name\": \"~1.1.4\"\n      },\n      \"engines\": {\n        \"node\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/color-name\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/emoji-regex\": {\n      \"version\": \"8.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\n      \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/external-editor\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz\",\n      \"integrity\": \"sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chardet\": \"^0.7.0\",\n        \"iconv-lite\": \"^0.4.24\",\n        \"tmp\": \"^0.0.33\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/iconv-lite\": {\n      \"version\": \"0.4.24\",\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\n      \"integrity\": \"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safer-buffer\": \">= 2.1.2 < 3\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/inquirer\": {\n      \"version\": \"10.1.8\",\n      \"resolved\": \"https://registry.npmjs.org/inquirer/-/inquirer-10.1.8.tgz\",\n      \"integrity\": \"sha512-syxGpOzLyqVeZi1KDBjRTnCn5PiGWySGHP0BbqXbqsEK0ckkZk3egAepEWslUjZXj0rhkUapVXM/IpADWe4D6w==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@inquirer/prompts\": \"^5.3.8\",\n        \"@inquirer/type\": \"^1.5.2\",\n        \"@types/mute-stream\": \"^0.0.4\",\n        \"ansi-escapes\": \"^4.3.2\",\n        \"mute-stream\": \"^1.0.0\",\n        \"run-async\": \"^3.0.0\",\n        \"rxjs\": \"^7.8.1\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/is-fullwidth-code-point\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\n      \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/mute-stream\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz\",\n      \"integrity\": \"sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==\",\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \"^14.17.0 || ^16.13.0 || >=18.0.0\"\n      }\n    },\n    \"node_modules/os-tmpdir\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\n      \"integrity\": \"sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/run-async\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-async/-/run-async-3.0.0.tgz\",\n      \"integrity\": \"sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.12.0\"\n      }\n    },\n    \"node_modules/rxjs\": {\n      \"version\": \"7.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/rxjs/-/rxjs-7.8.1.tgz\",\n      \"integrity\": \"sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==\",\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"tslib\": \"^2.1.0\"\n      }\n    },\n    \"node_modules/safer-buffer\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/signal-exit\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz\",\n      \"integrity\": \"sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==\",\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/isaacs\"\n      }\n    },\n    \"node_modules/string-width\": {\n      \"version\": \"4.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\n      \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"emoji-regex\": \"^8.0.0\",\n        \"is-fullwidth-code-point\": \"^3.0.0\",\n        \"strip-ansi\": \"^6.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/strip-ansi\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\n      \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-regex\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/tmp\": {\n      \"version\": \"0.0.33\",\n      \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz\",\n      \"integrity\": \"sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"os-tmpdir\": \"~1.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">=0.6.0\"\n      }\n    },\n    \"node_modules/tslib\": {\n      \"version\": \"2.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.7.0.tgz\",\n      \"integrity\": \"sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==\",\n      \"license\": \"0BSD\"\n    },\n    \"node_modules/type-fest\": {\n      \"version\": \"0.21.3\",\n      \"resolved\": \"https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz\",\n      \"integrity\": \"sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==\",\n      \"license\": \"(MIT OR CC0-1.0)\",\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/undici-types\": {\n      \"version\": \"6.19.8\",\n      \"resolved\": \"https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz\",\n      \"integrity\": \"sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/wrap-ansi\": {\n      \"version\": \"6.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz\",\n      \"integrity\": \"sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.0.0\",\n        \"string-width\": \"^4.1.0\",\n        \"strip-ansi\": \"^6.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/yoctocolors-cjs\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.2.tgz\",\n      \"integrity\": \"sha512-cYVsTjKl8b+FrnidjibDWskAv7UKOfcwaVZdp/it9n1s9fU3IkgDbhdIRKCW4JDsAlECJY0ytoVPT3sK6kideA==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    }\n  }\n}\n",
  "config/package.json": "{\n  \"name\": \"pow-shield\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Prevent against DDoS attacks using multiple algorithms and a proof of work system to validate requests. If request is valid, it will be forwarded to the server. If not, it will be dropped.\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"pow-shield\": \"./index.js\"\n  },\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"node index.js\",\n    \"link\": \"npm link\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"chalk\": \"^5.3.0\",\n    \"inquirer\": \"^10.1.8\"\n  }\n}\n",
  "config/sample.ts": "import fs from \"fs\";\n\ninterface FirewallConfig {\n  blockedIPs: string[];\n  logFile: string;\n}\n\nclass FirewallManager {\n  config: FirewallConfig;\n\n  constructor(configFile: string) {\n    this.config = JSON.parse(fs.readFileSync(configFile, \"utf-8\"));\n  }\n\n  blockIP(ip: string) {\n    if (!this.config.blockedIPs.includes(ip)) {\n      this.config.blockedIPs.push(ip);\n      this.saveConfig();\n      console.log(`IP ${ip} blocked`);\n    }\n  }\n\n  unblockIP(ip: string) {\n    const index = this.config.blockedIPs.indexOf(ip);\n    if (index !== -1) {\n      this.config.blockedIPs.splice(index, 1);\n      this.saveConfig();\n      console.log(`IP ${ip} unblocked`);\n    }\n  }\n\n  saveConfig() {\n    fs.writeFileSync(\n      \"./firewall_config.json\",\n      JSON.stringify(this.config, null, 2),\n    );\n  }\n\n  logBlockedIP(ip: string) {\n    const logEntry = `${new Date().toISOString()} - Blocked IP: ${ip}\\n`;\n    fs.appendFileSync(this.config.logFile, logEntry);\n  }\n}\n\n// Usage example:\nconst firewallManager = new FirewallManager(\"./firewall_config.json\");\nfirewallManager.blockIP(\"192.168.0.1\");\nfirewallManager.unblockIP(\"192.168.0.1\");\n",
  "dataGen.sh": "#!/bin/bash\n\n# File to output the simulated data\noutput_file=\"ddos_data.csv\"\n\n# List of possible IP addresses\nip_addresses=(\"127.0.0.1\" \"192.168.0.1\" \"10.0.0.1\" \"172.16.0.1\" \"203.0.113.0\" \"198.51.100.0\")\n\n# List of possible browsers\nbrowsers=(\"NOT-FOUND\" \"Safari\" \"Chrome\" \"Firefox\" \"Edge\" \"Opera\")\n\n# List of possible HTTP methods\nhttp_methods=(\"GET\" \"POST\" \"HEAD\" \"OPTIONS\")\n\n# List of possible status codes\nstatus_codes=(\"200\" \"301\" \"400\" \"403\" \"404\" \"500\" \"502\")\n\n# Function to generate a random timestamp using a simpler format\nrandom_timestamp() {\n    echo \"$(date '+%s%3N')\"\n}\n\n# Function to generate a random request count\nrandom_request_count() {\n    echo $((RANDOM % 100 + 1))\n}\n\n# Function to generate a random response time in milliseconds\n# Adjusts response time based on whether it's a DDoS attempt or not\nrandom_response_time() {\n    local is_ddos=$1\n    if [ \"$is_ddos\" = \"true\" ]; then\n        echo $((RANDOM % 2000 + 800))  # Response time between 1000 and 3000 ms\n    else\n        echo $((RANDOM % 1000 + 200))    # Response time between 200 and 1000 ms\n    fi\n}\n\n# Function to pick a random element from an array\npick_random() {\n    local array=(\"$@\")\n    echo \"${array[RANDOM % ${#array[@]}]}\"\n}\n\n# Function to generate DDoS attempt data\ngenerate_ddos_attempt() {\n    local ddos_ip=$1\n    local ddos_browser=$2\n    local ddos_http_method=$3\n    local ddos_status_code=$4\n\n    for j in {1..1000}; do\n        timestamp=$(random_timestamp)\n        request_count=$((RANDOM % 300 + 200))  # Request count between 200 and 500\n        response_time=$(random_response_time true)\n\n        echo \"$timestamp,$ddos_ip,$ddos_browser,$request_count,$ddos_http_method,$ddos_status_code,$response_time,DDOS\" >> \"$output_file\"\n    done\n}\n\n# Generate the file header\necho \"Timestamp,IP Address,Browser,Request Count,HTTP Method,Status Code,Response Time (ms),DDoS Happening\" > \"$output_file\"\n\n# Generate 999,000 normal entries\nfor ((i=1; i<=999000; i++)); do\n    echo $i\n    timestamp=$(random_timestamp)\n    ip=$(pick_random \"${ip_addresses[@]}\")\n    browser=$(pick_random \"${browsers[@]}\")\n    request_count=$(random_request_count)\n    http_method=$(pick_random \"${http_methods[@]}\")\n    status_code=$(pick_random \"${status_codes[@]}\")\n    response_time=$(random_response_time false)\n\n    echo \"$timestamp,$ip,$browser,$request_count,$http_method,$status_code,$response_time,NoDDoS\" >> \"$output_file\"\n\n    if (( i % 10000 == 0 )); then\n        echo \"DDOS attempt at $i\"\n        generate_ddos_attempt \"203.0.113.0\" \"Chrome\" \"GET\" \"200\"\n        generate_ddos_attempt \"198.51.100.0\" \"Firefox\" \"POST\" \"502\"\n    fi\ndone\n\necho \"Generated $output_file with 1 million entries including simulated DDoS attempts.\"\n",
  "ddos_data.csv": "Timestamp,IP Address,Browser,Request Count,HTTP Method,Status Code,Response Time (ms),DDoS Happening\n17251694723N,127.0.0.1,Chrome,72,POST,502,350,NoDDoS\n17251694723N,192.168.0.1,Firefox,76,HEAD,403,822,NoDDoS\n17251694723N,10.0.0.1,Chrome,49,HEAD,301,527,NoDDoS\n17251694723N,127.0.0.1,Safari,54,OPTIONS,500,232,NoDDoS\n17251694723N,198.51.100.0,Safari,59,GET,301,705,NoDDoS\n17251694723N,127.0.0.1,NOT-FOUND,31,POST,502,409,NoDDoS\n17251694723N,198.51.100.0,Safari,36,POST,403,882,NoDDoS\n17251694723N,172.16.0.1,NOT-FOUND,41,HEAD,200,587,NoDDoS\n17251694723N,203.0.113.0,Edge,14,OPTIONS,404,292,NoDDoS\n17251694723N,172.16.0.1,Opera,18,GET,301,764,NoDDoS\n17251694723N,203.0.113.0,Edge,91,POST,502,469,NoDDoS\n17251694723N,10.0.0.1,Firefox,96,POST,403,1174,NoDDoS\n17251694723N,192.168.0.1,Firefox,1,HEAD,502,647,NoDDoS\n17251694723N,10.0.0.1,Chrome,73,OPTIONS,404,351,NoDDoS\n17251694723N,172.16.0.1,Firefox,17,HEAD,404,894,NoDDoS\n17251694723N,10.0.0.1,Chrome,21,OPTIONS,301,599,NoDDoS\n17251694723N,127.0.0.1,Firefox,26,OPTIONS,500,1072,NoDDoS\n17251694723N,192.168.0.1,Chrome,99,GET,400,777,NoDDoS\n17251694723N,127.0.0.1,Chrome,4,POST,502,481,NoDDoS\n17251694723N,198.51.100.0,Safari,8,HEAD,403,954,NoDDoS\n17251694723N,198.51.100.0,NOT-FOUND,81,HEAD,301,659,NoDDoS\n17251694723N,203.0.113.0,Safari,86,OPTIONS,404,1132,NoDDoS\n17251694723N,198.51.100.0,Opera,59,GET,400,837,NoDDoS\n17251694723N,203.0.113.0,Edge,63,POST,502,541,NoDDoS\n17251694723N,10.0.0.1,Opera,68,POST,403,1014,NoDDoS\n17251694723N,172.16.0.1,Edge,41,HEAD,200,719,NoDDoS\n17251694723N,10.0.0.1,Edge,46,OPTIONS,404,424,NoDDoS\n17251694723N,172.16.0.1,Firefox,89,HEAD,404,967,NoDDoS\n17251694723N,10.0.0.1,Edge,93,OPTIONS,301,439,NoDDoS\n17251694723N,172.16.0.1,Firefox,66,GET,502,1144,NoDDoS\n17251694723N,192.168.0.1,Edge,71,GET,403,849,NoDDoS\n17251694723N,127.0.0.1,Chrome,76,POST,502,322,NoDDoS\n17251694723N,192.168.0.1,Safari,48,HEAD,404,1026,NoDDoS\n17251694723N,127.0.0.1,Chrome,53,OPTIONS,301,499,NoDDoS\n17251694723N,127.0.0.1,Safari,26,OPTIONS,500,204,NoDDoS\n17251694723N,198.51.100.0,Opera,31,GET,400,909,NoDDoS\n17251694723N,203.0.113.0,NOT-FOUND,36,POST,502,381,NoDDoS\n17251694723N,198.51.100.0,Opera,8,HEAD,404,1086,NoDDoS\n17251694723N,172.16.0.1,NOT-FOUND,13,HEAD,301,791,NoDDoS\n17251694723N,203.0.113.0,Opera,56,POST,301,334,NoDDoS\n17251694723N,172.16.0.1,NOT-FOUND,61,HEAD,404,807,NoDDoS\n17251694723N,203.0.113.0,Edge,34,OPTIONS,400,512,NoDDoS\n17251694723N,172.16.0.1,Opera,38,GET,502,216,NoDDoS\n17251694723N,192.168.0.1,Edge,43,GET,403,689,NoDDoS\n17251694723N,10.0.0.1,Firefox,16,POST,200,394,NoDDoS\n17251694723N,192.168.0.1,Firefox,21,HEAD,404,867,NoDDoS\n17251694723N,10.0.0.1,Chrome,93,OPTIONS,301,571,NoDDoS\n17251694723N,192.168.0.1,Firefox,68,HEAD,301,1114,NoDDoS\n17251694723N,10.0.0.1,Chrome,41,OPTIONS,502,819,NoDDoS\n17251694723N,127.0.0.1,Firefox,46,OPTIONS,403,292,NoDDoS\n17251694723N,192.168.0.1,Safari,51,GET,502,997,NoDDoS\n17251694723N,127.0.0.1,NOT-FOUND,23,POST,404,701,NoDDoS\n17251694723N,198.51.100.0,Safari,28,HEAD,301,1174,NoDDoS\n17251694723N,127.0.0.1,Chrome,71,POST,301,717,NoDDoS\n17251694723N,127.0.0.1,Safari,76,POST,500,422,NoDDoS\n17251694723N,198.51.100.0,Opera,49,HEAD,400,1127,NoDDoS\n17251694723N,203.0.113.0,NOT-FOUND,54,OPTIONS,502,599,NoDDoS\n17251694723N,198.51.100.0,Opera,26,GET,404,304,NoDDoS\n17251694723N,127.0.0.1,NOT-FOUND,1,OPTIONS,403,847,NoDDoS\n17251694723N,198.51.100.0,Opera,74,OPTIONS,301,552,NoDDoS\n17251694723N,172.16.0.1,NOT-FOUND,79,GET,500,1025,NoDDoS\n17251694723N,203.0.113.0,Edge,52,POST,400,730,NoDDoS\n17251694723N,172.16.0.1,Opera,27,GET,301,273,NoDDoS\n17251694723N,203.0.113.0,Edge,99,POST,502,977,NoDDoS\n17251694733N,198.51.100.0,Opera,43,GET,502,520,NoDDoS\n17251694733N,203.0.113.0,NOT-FOUND,47,POST,403,993,NoDDoS\n17251694733N,10.0.0.1,Opera,52,POST,200,698,NoDDoS\n17251694733N,172.16.0.1,Edge,25,HEAD,404,403,NoDDoS\n17251694733N,10.0.0.1,Edge,30,OPTIONS,301,875,NoDDoS\n17251694733N,172.16.0.1,Firefox,2,GET,502,580,NoDDoS\n17251694733N,192.168.0.1,Chrome,7,GET,403,285,NoDDoS\n17251694733N,127.0.0.1,Firefox,12,POST,502,758,NoDDoS\n17251694733N,192.168.0.1,Safari,85,HEAD,404,463,NoDDoS\n17251694733N,127.0.0.1,Chrome,89,OPTIONS,301,935,NoDDoS\n17251694733N,203.0.113.0,Safari,94,OPTIONS,500,640,NoDDoS\n17251694733N,198.51.100.0,NOT-FOUND,67,GET,400,345,NoDDoS\n17251694733N,203.0.113.0,NOT-FOUND,72,POST,502,818,NoDDoS\n17251694733N,198.51.100.0,Opera,44,HEAD,404,522,NoDDoS\n17251694733N,203.0.113.0,Edge,49,HEAD,301,227,NoDDoS\n17251694743N,198.51.100.0,Opera,92,HEAD,301,770,NoDDoS\n17251694743N,172.16.0.1,NOT-FOUND,97,HEAD,500,243,NoDDoS\n17251694743N,203.0.113.0,Edge,70,OPTIONS,400,948,NoDDoS\n17251694743N,172.16.0.1,Firefox,74,GET,502,652,NoDDoS\n17251694743N,10.0.0.1,Edge,79,POST,403,1125,NoDDoS\n17251694743N,10.0.0.1,Firefox,52,POST,301,830,NoDDoS\n17251694743N,192.168.0.1,Firefox,57,HEAD,404,303,NoDDoS\n17251694743N,127.0.0.1,Chrome,62,OPTIONS,301,1007,NoDDoS\n17251694743N,192.168.0.1,Firefox,5,HEAD,301,550,NoDDoS\n17251694743N,10.0.0.1,Edge,48,POST,301,1094,NoDDoS\n17251694743N,172.16.0.1,Firefox,20,HEAD,502,798,NoDDoS\n17251694743N,10.0.0.1,Chrome,95,POST,500,412,NoDDoS\n17251694753N,198.51.100.0,NOT-FOUND,77,HEAD,301,955,NoDDoS\n17251694753N,203.0.113.0,NOT-FOUND,82,OPTIONS,500,427,NoDDoS\n17251694753N,198.51.100.0,Opera,86,GET,400,1132,NoDDoS\n17251694753N,172.16.0.1,Edge,59,GET,200,837,NoDDoS\n17251694753N,10.0.0.1,Opera,64,POST,403,310,NoDDoS\n17251694753N,172.16.0.1,Firefox,37,HEAD,301,1015,NoDDoS\n17251694753N,10.0.0.1,Edge,41,OPTIONS,500,719,NoDDoS\n17251694753N,192.168.0.1,Firefox,46,OPTIONS,400,1192,NoDDoS\n17251694753N,192.168.0.1,Chrome,19,GET,502,897,NoDDoS\n17251694753N,127.0.0.1,Chrome,24,POST,403,370,NoDDoS\n17251694763N,192.168.0.1,Safari,67,GET,403,1145,NoDDoS\n17251694763N,127.0.0.1,Chrome,71,POST,200,617,NoDDoS\n17251694763N,192.168.0.1,Safari,44,HEAD,500,322,NoDDoS\n17251694763N,198.51.100.0,Chrome,49,HEAD,400,795,NoDDoS\n17251694763N,127.0.0.1,NOT-FOUND,54,OPTIONS,500,500,NoDDoS\n17251694763N,198.51.100.0,Opera,26,GET,403,204,NoDDoS\n17251694763N,203.0.113.0,NOT-FOUND,31,POST,200,677,NoDDoS\n17251694763N,203.0.113.0,Opera,4,POST,500,382,NoDDoS\n17251694763N,172.16.0.1,Firefox,9,HEAD,301,1087,NoDDoS\n17251694773N,203.0.113.0,Opera,52,POST,301,630,NoDDoS\n17251694773N,172.16.0.1,Opera,57,HEAD,500,1102,NoDDoS\n17251694773N,203.0.113.0,Edge,29,OPTIONS,403,807,NoDDoS\n17251694773N,10.0.0.1,Firefox,34,OPTIONS,200,512,NoDDoS\n17251694773N,192.168.0.1,Edge,39,GET,403,985,NoDDoS\n17251694773N,10.0.0.1,Chrome,12,POST,301,690,NoDDoS\n17251694773N,192.168.0.1,Firefox,16,HEAD,500,1162,NoDDoS\n17251694773N,127.0.0.1,Chrome,21,HEAD,400,867,NoDDoS\n17251694773N,127.0.0.1,Safari,94,OPTIONS,502,572,NoDDoS\n17251694773N,192.168.0.1,Chrome,37,HEAD,200,1115,NoDDoS\n17251694783N,127.0.0.1,Chrome,42,OPTIONS,403,588,NoDDoS\n17251694783N,198.51.100.0,Safari,46,GET,200,292,NoDDoS\n17251694783N,127.0.0.1,NOT-FOUND,19,POST,500,997,NoDDoS\n17251694783N,203.0.113.0,Safari,24,POST,400,470,NoDDoS\n17251694783N,198.51.100.0,Opera,97,HEAD,502,1175,NoDDoS\n17251694783N,203.0.113.0,Edge,1,OPTIONS,403,879,NoDDoS\n17251694783N,172.16.0.1,Opera,6,GET,200,352,NoDDoS\n17251694783N,172.16.0.1,Edge,79,GET,500,1057,NoDDoS\n17251694783N,10.0.0.1,Edge,84,POST,301,530,NoDDoS\n17251694783N,192.168.0.1,Firefox,89,HEAD,500,234,NoDDoS\n17251694783N,10.0.0.1,Chrome,61,OPTIONS,403,939,NoDDoS\n17251694783N,127.0.0.1,Firefox,66,OPTIONS,200,412,NoDDoS\n17251694783N,192.168.0.1,Safari,39,GET,404,1117,NoDDoS\n17251694783N,127.0.0.1,NOT-FOUND,44,POST,301,821,NoDDoS\n17251694783N,198.51.100.0,Safari,48,HEAD,500,294,NoDDoS\n17251694783N,198.51.100.0,NOT-FOUND,21,HEAD,403,837,NoDDoS\n17251694793N,192.168.0.1,Safari,64,POST,403,542,NoDDoS\n17251694793N,198.51.100.0,NOT-FOUND,69,HEAD,502,247,NoDDoS\n17251694793N,203.0.113.0,NOT-FOUND,74,OPTIONS,403,720,NoDDoS\n17251694793N,198.51.100.0,Opera,46,GET,301,424,NoDDoS\n17251694793N,203.0.113.0,NOT-FOUND,51,GET,500,897,NoDDoS\n17251694793N,10.0.0.1,Opera,56,POST,400,602,NoDDoS\n17251694793N,172.16.0.1,Firefox,29,HEAD,502,307,NoDDoS\n17251694793N,172.16.0.1,Edge,89,HEAD,404,667,NoDDoS\n17251694793N,10.0.0.1,Edge,94,OPTIONS,200,372,NoDDoS\n17251694803N,127.0.0.1,NOT-FOUND,45,OPTIONS,502,823,NoDDoS\n17251694803N,192.168.0.1,Safari,88,HEAD,502,366,NoDDoS\n17251694803N,127.0.0.1,Chrome,93,OPTIONS,403,839,NoDDoS\n17251694803N,203.0.113.0,Safari,98,OPTIONS,200,544,NoDDoS\n17251694803N,198.51.100.0,Opera,71,HEAD,200,1087,NoDDoS\n17251694813N,127.0.0.1,NOT-FOUND,14,OPTIONS,404,792,NoDDoS\n17251694813N,198.51.100.0,Safari,19,GET,301,264,NoDDoS\n17251694813N,127.0.0.1,Firefox,32,POST,404,878,NoDDoS\n17251694813N,192.168.0.1,Safari,5,HEAD,301,583,NoDDoS\n17251694813N,127.0.0.1,Chrome,9,OPTIONS,500,1055,NoDDoS\n17251694813N,192.168.0.1,Safari,82,OPTIONS,500,830,NoDDoS\n17251694813N,127.0.0.1,Chrome,57,OPTIONS,400,303,NoDDoS\n17251694813N,127.0.0.1,Safari,30,OPTIONS,200,1008,NoDDoS\n17251694813N,198.51.100.0,Safari,35,GET,403,481,NoDDoS\n17251694813N,172.16.0.1,Firefox,86,GET,400,1164,NoDDoS\n17251694813N,10.0.0.1,Edge,91,GET,502,637,NoDDoS\n17251694813N,10.0.0.1,Firefox,64,POST,404,342,NoDDoS\n17251694813N,192.168.0.1,Firefox,69,HEAD,200,815,NoDDoS\n17251694813N,10.0.0.1,Chrome,73,OPTIONS,404,519,NoDDoS\n17251694823N,192.168.0.1,Firefox,17,HEAD,404,1062,NoDDoS\n17251694823N,10.0.0.1,Chrome,89,OPTIONS,400,767,NoDDoS\n17251694823N,127.0.0.1,Firefox,94,OPTIONS,502,240,NoDDoS\n17251694823N,198.51.100.0,Safari,99,GET,400,945,NoDDoS\n17251694823N,127.0.0.1,NOT-FOUND,72,POST,200,649,NoDDoS\n17251694823N,192.168.0.1,Safari,15,HEAD,403,1031,NoDDoS\n17251694833N,10.0.0.1,Chrome,58,OPTIONS,200,736,NoDDoS\n17251694833N,192.168.0.1,Safari,62,GET,404,440,NoDDoS\n17251694833N,127.0.0.1,Chrome,67,POST,301,913,NoDDoS\n17251694833N,127.0.0.1,Safari,40,POST,502,618,NoDDoS\n17251694833N,198.51.100.0,Safari,45,HEAD,400,1091,NoDDoS\n17251694833N,203.0.113.0,NOT-FOUND,88,POST,400,866,NoDDoS\n17251694833N,198.51.100.0,Safari,93,HEAD,502,338,NoDDoS\n17251694833N,127.0.0.1,NOT-FOUND,65,OPTIONS,404,1043,NoDDoS\n17251694833N,203.0.113.0,Safari,70,OPTIONS,301,516,NoDDoS\n17251694833N,172.16.0.1,Opera,75,GET,404,221,NoDDoS\n17251694833N,203.0.113.0,Edge,48,POST,400,925,NoDDoS\n17251694833N,198.51.100.0,Opera,91,GET,500,307,NoDDoS\n17251694843N,127.0.0.1,Firefox,4,POST,500,1082,NoDDoS\n17251694843N,198.51.100.0,Safari,9,HEAD,301,555,NoDDoS\n17251694843N,127.0.0.1,NOT-FOUND,82,OPTIONS,502,259,NoDDoS\n17251694843N,198.51.100.0,Safari,86,GET,403,732,NoDDoS\n17251694843N,198.51.100.0,NOT-FOUND,59,GET,200,437,NoDDoS\n17251694843N,203.0.113.0,Edge,64,POST,404,1142,NoDDoS\n17251694843N,172.16.0.1,Opera,69,HEAD,301,614,NoDDoS\n17251694843N,203.0.113.0,Edge,41,OPTIONS,502,319,NoDDoS\n17251694843N,10.0.0.1,Opera,46,OPTIONS,403,1024,NoDDoS\n17251694843N,192.168.0.1,Edge,89,HEAD,403,567,NoDDoS\n17251694853N,10.0.0.1,Opera,94,OPTIONS,502,1040,NoDDoS\n17251694853N,172.16.0.1,Firefox,67,GET,404,745,NoDDoS\n17251694853N,10.0.0.1,Opera,89,HEAD,500,267,NoDDoS\n17251694853N,127.0.0.1,Chrome,93,OPTIONS,500,648,NoDDoS\n17251694863N,172.16.0.1,Firefox,75,GET,500,353,NoDDoS\n17251694863N,10.0.0.1,Edge,79,POST,400,825,NoDDoS\n17251694863N,172.16.0.1,Firefox,23,GET,400,600,NoDDoS\n17251694863N,10.0.0.1,Edge,27,POST,502,1073,NoDDoS\n17251694863N,10.0.0.1,Firefox,100,POST,404,778,NoDDoS\n17251694863N,192.168.0.1,Edge,5,HEAD,200,483,NoDDoS\n17251694863N,127.0.0.1,Chrome,10,OPTIONS,404,956,NoDDoS\n17251694863N,192.168.0.1,Safari,82,GET,400,660,NoDDoS\n17251694863N,198.51.100.0,Chrome,87,GET,502,1133,NoDDoS\n17251694863N,127.0.0.1,Safari,60,POST,403,838,NoDDoS\n17251694873N,10.0.0.1,Chrome,73,OPTIONS,502,451,NoDDoS\n17251694873N,127.0.0.1,Firefox,78,OPTIONS,403,924,NoDDoS\n17251694873N,192.168.0.1,Safari,51,GET,200,629,NoDDoS\n17251694873N,127.0.0.1,Chrome,55,POST,404,333,NoDDoS\n17251694873N,198.51.100.0,Safari,60,HEAD,301,806,NoDDoS\n17251694873N,198.51.100.0,NOT-FOUND,33,HEAD,502,511,NoDDoS\n17251694873N,203.0.113.0,NOT-FOUND,38,OPTIONS,400,984,NoDDoS\n17251694873N,198.51.100.0,Opera,81,HEAD,400,759,NoDDoS\n17251694883N,203.0.113.0,NOT-FOUND,86,OPTIONS,502,232,NoDDoS\n17251694883N,198.51.100.0,Opera,58,GET,404,936,NoDDoS\n17251694883N,172.16.0.1,NOT-FOUND,63,GET,301,409,NoDDoS\n17251694883N,203.0.113.0,Opera,68,POST,404,1114,NoDDoS\n17251694883N,172.16.0.1,Firefox,41,HEAD,400,819,NoDDoS\n17251694883N,10.0.0.1,Edge,45,OPTIONS,502,291,NoDDoS\n17251694883N,172.16.0.1,Firefox,18,OPTIONS,404,996,NoDDoS\n17251694883N,192.168.0.1,Edge,23,GET,301,701,NoDDoS\n17251694883N,127.0.0.1,Chrome,28,POST,404,1174,NoDDoS\n17251694883N,192.168.0.1,Safari,100,HEAD,400,878,NoDDoS\n17251694883N,10.0.0.1,Chrome,43,POST,400,421,NoDDoS\n17251694883N,172.16.0.1,Edge,57,HEAD,404,1035,NoDDoS\n17251694893N,10.0.0.1,Edge,62,OPTIONS,301,508,NoDDoS\n17251694893N,172.16.0.1,Firefox,34,GET,502,212,NoDDoS\n17251694893N,192.168.0.1,Edge,39,GET,403,685,NoDDoS\n17251694893N,127.0.0.1,Firefox,44,POST,502,390,NoDDoS\n17251694893N,192.168.0.1,Safari,17,HEAD,404,1095,NoDDoS\n17251694893N,127.0.0.1,Chrome,21,OPTIONS,301,567,NoDDoS\n17251694893N,192.168.0.1,Safari,94,OPTIONS,502,272,NoDDoS\n17251694893N,198.51.100.0,NOT-FOUND,99,GET,403,977,NoDDoS\n17251694893N,203.0.113.0,NOT-FOUND,4,POST,502,450,NoDDoS\n17251694893N,198.51.100.0,Opera,76,HEAD,404,1154,NoDDoS\n17251694893N,203.0.113.0,NOT-FOUND,81,HEAD,301,627,NoDDoS\n17251694893N,198.51.100.0,Opera,24,HEAD,301,402,NoDDoS\n17251694893N,127.0.0.1,NOT-FOUND,38,OPTIONS,403,784,NoDDoS\n17251694903N,192.168.0.1,Safari,10,GET,301,488,NoDDoS\n17251694903N,127.0.0.1,Chrome,15,GET,500,961,NoDDoS\n17251694903N,203.0.113.0,Safari,20,POST,301,666,NoDDoS\n17251694903N,198.51.100.0,Opera,93,HEAD,502,371,NoDDoS\n17251694903N,203.0.113.0,NOT-FOUND,97,OPTIONS,403,843,NoDDoS\n17251694903N,198.51.100.0,Opera,70,OPTIONS,301,548,NoDDoS\n17251694903N,172.16.0.1,Edge,75,GET,500,253,NoDDoS\n17251694903N,10.0.0.1,Edge,80,POST,301,726,NoDDoS\n",
  "docker-compose.yaml": "services:\n  firewall:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8080:8080\"\n",
  "firewall/main.cpp": "#include <stdio.h>\n#include <iostream>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <stdbool.h>\n#include <vector>\n#include <string>\n#include <queue>\n#include <unordered_map>\n#include <time.h>\n#include <unordered_set>\n#include <sys/time.h>\n// #include <Kernel/sys/_types/_fd_zero.h>\nusing namespace std;\n\n#define PORT 8080\n#define BUFFER_SIZE 1024\n#define MAX_TIME 600000  // 10 minutes in milliseconds\n#define MAX_REQ 10\n#define CSV_FILE \"../log.csv\"\n#define BAN_HANDSHAKE_SEC 0\n#define BAN_HANDSHAKE_uSEC 500\n\nclass RecentCounter {\npublic:\n    queue<pair<long long, string> > q;\n    unordered_map<string, int> NODE_BROW_COUNT;\n    int numReq;\n    // string IP_ADD;\n    RecentCounter(){\n        numReq = 0;\n    }\n    int ping(long long t, string browser) {\n        q.push(make_pair(t, browser));\n        int count = 0;\n        int size = q.size();\n        NODE_BROW_COUNT[browser]++;\n        while (q.front().first < t - MAX_TIME) {\n            NODE_BROW_COUNT[q.front().second]--;\n            q.pop();\n            count++;\n        }\n        numReq = size - count;\n        return size - count;\n    }\n};\n\n// Function to get the current time in milliseconds\nlong long current_time_millis() {\n    struct timespec ts;\n    clock_gettime(CLOCK_REALTIME, &ts);\n    return ts.tv_sec * 1000LL + ts.tv_nsec / 1000000LL;\n}\n\n// Function to extract the browser name from the User-Agent string\nvoid extract_browser_name(char *user_agent, char *browser) {\n    if (strstr(user_agent, \"Chrome\") != NULL) {\n        strcpy(browser, \"Chrome\");\n    } else if (strstr(user_agent, \"Firefox\") != NULL) {\n        strcpy(browser, \"Firefox\");\n    } else if (strstr(user_agent, \"Safari\") != NULL) {\n        strcpy(browser, \"Safari\");\n    } else if (strstr(user_agent, \"Edge\") != NULL) {\n        strcpy(browser, \"Edge\");\n    } else {\n        strcpy(browser, \"Unknown\");\n    }\n}\n\n// Function to log the data to a CSV file\nvoid log_request(char *ip_address, char *browser, long long time_millis) {\n    FILE *file = fopen(CSV_FILE, \"r+\");\n    if (!file) {\n        file = fopen(CSV_FILE, \"w\");\n        fprintf(file, \"IP Address,Browser,Request Count,Time (ms)\\n\");\n    } else {\n        // Check if the entry exists\n        char line[BUFFER_SIZE];\n        char file_ip[BUFFER_SIZE];\n        char file_browser[BUFFER_SIZE];\n        int file_count;\n        long long file_time;\n        bool found = false;\n\n        while (fgets(line, sizeof(line), file)) {\n            sscanf(line, \"%[^,],%[^,],%d,%lld\", file_ip, file_browser, &file_count, &file_time);\n            if (strcmp(file_ip, ip_address) == 0 && strcmp(file_browser, browser) == 0) {\n                found = true;\n                fseek(file, -strlen(line), SEEK_CUR);\n                fprintf(file, \"%s,%s,%d,%lld\\n\", file_ip, file_browser, file_count + 1, time_millis);\n                break;\n            }\n        }\n\n        if (!found) {\n            fprintf(file, \"%s,%s,%d,%lld\\n\", ip_address, browser, 1, time_millis);\n        }\n    }\n\n    fclose(file);\n}\n\nbool user_agent(struct sockaddr_in *address, char *buffer, unordered_map<string, RecentCounter> &ipMap) {\n    char *user_agent_start = strstr(buffer, \"User-Agent:\");\n\n    printf(\"C analyzer: User-Agent %s\", user_agent_start);\n    if (user_agent_start != NULL) {\n        user_agent_start += strlen(\"User-Agent:\");  // Move the pointer past \"User-Agent:\"\n        char *user_agent_end = strstr(user_agent_start, \"\\r\\n\");\n        if (user_agent_end) {\n            size_t length = user_agent_end - user_agent_start;\n            char user_agent[length + 1];\n            strncpy(user_agent, user_agent_start, length);\n            user_agent[length] = '\\0';  // Null-terminate the string\n\n            char browser[BUFFER_SIZE];\n            extract_browser_name(user_agent, browser);\n\n            char ip_address[INET_ADDRSTRLEN];\n            inet_ntop(AF_INET, &(address->sin_addr), ip_address, INET_ADDRSTRLEN);\n\n            long long current_time = current_time_millis();\n            log_request(ip_address, browser, current_time);\n            printf(\"C analyzer: IP %s, Browser %s logged at %lld ms.\\n\", ip_address, browser, current_time);\n            string newStr(ip_address);\n            string newBrow(browser);\n            ipMap[newStr].ping(current_time, newBrow);\n            return true;\n        }\n    }\n    char ip_address[INET_ADDRSTRLEN];\n    inet_ntop(AF_INET, &(address->sin_addr), ip_address, INET_ADDRSTRLEN);\n    long long current_time = current_time_millis();\n    char *valueStr = \"NOT-FOUND\";\n    log_request(ip_address, valueStr, current_time);\n    printf(\"\\nC analyzer: User-Agent not found. Logged at %lld ms.\\n\", current_time);\n    string newStr(ip_address);\n    string newBrow(\"NOT_FOUND\");\n    ipMap[newStr].ping(current_time, newBrow);\n    return false;\n}\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE] = {0};\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Attaching socket to the port 8081\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {\n        perror(\"setsockopt failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Binding the socket to the address\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        perror(\"Bind failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Start listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"Listen failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // RecentCounter counter;\n    fd_set readfds;\n    struct timeval timeout;\n    unordered_map<string, RecentCounter> ipMap;\n    unordered_set<string> blackList;\n    // blackList.insert(\"127.0.0.1\");\n    while (1) {\n        printf(\"C analyzer waiting for a connection...\\n\");\n        if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"Accept failed\");\n            exit(EXIT_FAILURE);\n        }\n        printf(\"C analyzer: Connection established.\\n\");\n\n        char *client_ip = inet_ntoa(address.sin_addr);\n        printf(\"Client IP: %s\\n\", client_ip);\n        string client_ip_str(client_ip);\n\n        // Debugging: Print the blacklist and the current IP being checked\n        cout << \"Current IP: \" << client_ip_str << endl;\n        cout << \"Blacklist contents:\" << endl;\n        for (const auto &ip : blackList) {\n            cout << ip << endl;\n        }\n\n        // Check if the client IP is in the blacklist\n        if (blackList.find(client_ip_str) != blackList.end()) {\n            const char *badresponse =\n                \"HTTP/1.1 200 OK\\r\\n\"\n                \"Content-Type: text/plain\\r\\n\"\n                \"Content-Length: 6\\r\\n\"\n                \"Connection: close\\r\\n\"\n                \"\\r\\n\"\n                \"unsafe\";\n            send(new_socket, badresponse, strlen(badresponse), 0);\n            close(new_socket);  // Close the connection immediately\n            continue;  // Skip the rest of the loop and wait for the next connection\n        }\n\n        FD_ZERO(&readfds);\n        FD_SET(new_socket, &readfds);\n        timeout.tv_sec = BAN_HANDSHAKE_SEC;  // 5-second timeout for read operations\n        timeout.tv_usec = BAN_HANDSHAKE_uSEC;\n\n        int activity = select(new_socket + 1, &readfds, NULL, NULL, &timeout);\n\n        if (activity == 0) {\n            // Timeout occurred, client didn't send any data\n            printf(\"C analyzer: Client %s performed handshake but sent no data. Closing connection.\\n\", client_ip);\n            close(new_socket);\n            continue;\n        } else if (activity < 0) {\n            perror(\"select error\");\n            close(new_socket);\n            continue;\n        }\n\n        int bytes_read = read(new_socket, buffer, BUFFER_SIZE);\n\n        if (bytes_read <= 0) {\n            // Client sent no data or an error occurred\n            printf(\"C analyzer: Client %s sent no data after connection. Closing connection.\\n\", client_ip);\n            close(new_socket);\n            continue;\n        }\n\n        read(new_socket, buffer, BUFFER_SIZE);\n        printf(\"C analyzer received: %s\\n\", buffer);\n\n        // Initialize RecentCounter for new IPs\n        if (ipMap.count(client_ip_str) == 0) {\n            ipMap[client_ip_str] = RecentCounter();\n        }\n\n        // Check if the IP has exceeded the request limit\n        if (ipMap[client_ip_str].numReq > MAX_REQ) {\n            blackList.insert(client_ip_str);  // Add the IP to the blacklist\n            // Send an unsafe response and close the connection\n            const char *badresponse =\n                \"HTTP/1.1 200 OK\\r\\n\"\n                \"Content-Type: text/plain\\r\\n\"\n                \"Content-Length: 6\\r\\n\"\n                \"Connection: close\\r\\n\"\n                \"\\r\\n\"\n                \"unsafe\";\n            send(new_socket, badresponse, strlen(badresponse), 0);\n            close(new_socket);\n            continue;\n        }\n\n        // Process the User-Agent and log the request\n        if (user_agent(&address, buffer, ipMap)) {\n            const char *saferesponse =\n                \"HTTP/1.1 200 OK\\r\\n\"\n                \"Content-Type: text/plain\\r\\n\"\n                \"Content-Length: 4\\r\\n\"\n                \"Connection: close\\r\\n\"\n                \"\\r\\n\"\n                \"safe\";\n            send(new_socket, saferesponse, strlen(saferesponse), 0);\n        } else {\n            const char *badresponse =\n                \"HTTP/1.1 200 OK\\r\\n\"\n                \"Content-Type: text/plain\\r\\n\"\n                \"Content-Length: 6\\r\\n\"\n                \"Connection: close\\r\\n\"\n                \"\\r\\n\"\n                \"unsafe\";\n            send(new_socket, badresponse, strlen(badresponse), 0);\n        }\n\n        close(new_socket);\n    }\n\n    return 0;\n}\n",
  "log.csv": "IP Address,Browser,Request Count,Time (ms)\n127.0.0.1,NOT-FOUND,92,1725127908799\n127.0.0.1,Safari,17,1725130988491\n",
  "readme.md": "# PoW-Shield\n\nPrevent against DDoS attacks using multiple algorithms and a proof of work system to validate requests. If request is valid, it will be forwarded to the server. If not, it will be dropped.\n\n## TODO\n\n- [ ] Connect with redis\n- [ ] Implement the proof of work system\n- [ ] Implement queue system\n- [ ] Add more algorithms:\n  - [ ] request comming from terminal / programs\n  - [ ] request comming from browser, and its a handshake\n\n## Installation\n\n```bash\n# Nothing\n```\n\n## Usage\n\n```bash\n# To build: /bin/bash build.sh\n# To run: /bin/bash run.sh\n```\n\n> [!IMPORTANT]\n> `run.sh` not tested on Windows and linux. Please run the commands manually.\n\n## License\n\n> TODO\n",
  "run.sh": "#!/bin/bash\n\n# Function to check if a command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Ensure the compiled binaries exist\nif [ ! -f firewall/main ]; then\n    echo \"Error: Firewall binary not found. Please compile first.\"\n    exit 1\nfi\n\nif [ ! -f algos/c/main ]; then\n    echo \"Error: C Analyzer binary not found. Please compile first.\"\n    exit 1\nfi\n\nif [ ! -f algos/rust/target/release/DDoS-Algos ]; then\n    echo \"Error: Rust Analyzer binary not found. Please build first.\"\n    exit 1\nfi\n\nopen_terminal() {\n    osascript -e \"tell application \\\"Terminal\\\" to do script \\\"$1\\\"\"\n}\n\ncurrent_dir=$(pwd)\n\n# Run the Firewall\nif command_exists gnome-terminal; then\n    gnome-terminal --title=\"Firewall\" -- ./firewall/main\nelif command_exists xterm; then\n    open_terminal \"/$current_dir/firewall/main\"\nelse\n    echo \"No suitable terminal emulator found. Please open terminals manually and run ./firewall/firewall.\"\nfi\n\n# Run the C Analyzer\nif command_exists gnome-terminal; then\n    gnome-terminal --title=\"C Analyzer\" -- ./algos/c/main\nelif command_exists xterm; then\nopen_terminal \"/$current_dir/algos/c/main\"\nelse\n    echo \"No suitable terminal emulator found. Please open terminals manually and run ./algos/c/algoc.\"\nfi\n\n# Run the Rust Analyzer\nif command_exists gnome-terminal; then\n    gnome-terminal --title=\"Rust Analyzer\" -- ./algos/rust/target/release/DDoS-Algos\nelif command_exists xterm; then\n    open_terminal \"/$current_dir/algos/rust/target/release/DDoS-Algos\"\nelse\n    echo \"No suitable terminal emulator found. Please open terminals manually and run ./algos/rust/target/release/rust_analyzer.\"\nfi\n",
  "test.sh": "#!/bin/bash\n\n# Define the URL you want to send the request to\nURL=\"http://example.com\"\n\n# Define the custom headers\nHEADER_USER_AGENT=\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"\nHEADER_ACCEPT=\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\"\nHEADER_CONNECTION=\"Connection: keep-alive\"\nHEADER_LANGUAGE=\"Accept-Language: en-US,en;q=0.5\"\n\n# Randomly decide whether to send headers (0 or 1)\nSEND_HEADERS=$((RANDOM % 2))\n\n# Send the GET request\nif [ $SEND_HEADERS -eq 1 ]; then\n    echo \"Sending request with headers...\"\n    curl -X GET \"$URL\" \\\n        -H \"$HEADER_USER_AGENT\" \\\n        -H \"$HEADER_ACCEPT\" \\\n        -H \"$HEADER_CONNECTION\" \\\n        -H \"$HEADER_LANGUAGE\"\nelse\n    echo \"Sending request without headers...\"\n    curl -X GET \"$URL\"\nfi\n"
}
