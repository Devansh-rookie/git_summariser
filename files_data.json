{
  ".gitignore": "/node_modules\nnode_modules/\n/frontend/node_modules/\n.env",
  "README.md": "\n# Talk-A-Tive\n\nTalk-a-tive is a Full Stack Chatting App.\nUses Socket.io for real time communication and stores user details in encrypted format in Mongo DB Database.\n## Tech Stack\n\n**Client:** React JS\n\n**Server:** Node JS, Express JS\n\n**Database:** Mongo DB\n  \n## Demo\n\n[https://talk-a-tive.herokuapp.com/](https://talk-a-tive-7fgq.onrender.com)\n\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/group%20%2B%20notif.PNG)\n## Run Locally\n\nClone the project\n\n```bash\n  git clone https://github.com/piyush-eon/mern-chat-app\n```\n\nGo to the project directory\n\n```bash\n  cd mern-chat-app\n```\n\nInstall dependencies\n\n```bash\n  npm install\n```\n\n```bash\n  cd frontend/\n  npm install\n```\n\nStart the server\n\n```bash\n  npm run start\n```\nStart the Client\n\n```bash\n  //open now terminal\n  cd frontend\n  npm start\n```\n\n  \n# Features\n\n### Authenticaton\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/login.PNG)\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/signup.PNG)\n### Real Time Chatting with Typing indicators\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/real-time.PNG)\n### One to One chat\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/mainscreen.PNG)\n### Search Users\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/search.PNG)\n### Create Group Chats\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/new%20grp.PNG)\n### Notifications \n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/group%20%2B%20notif.PNG)\n### Add or Remove users from group\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/add%20rem.PNG)\n### View Other user Profile\n![](https://github.com/piyush-eon/mern-chat-app/blob/master/screenshots/profile.PNG)\n## Made By\n\n- [@Piyush-eon](https://github.com/piyush-eon)\n\n  \n",
  "backend/config/db.js": "const mongoose = require(\"mongoose\");\nconst colors = require(\"colors\");\n\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n\n    console.log(`MongoDB Connected: ${conn.connection.host}`.cyan.underline);\n  } catch (error) {\n    console.error(`Error: ${error.message}`.red.bold);\n    process.exit(1); // Exit with a non-zero status code to indicate an error\n  }\n};\n\nmodule.exports = connectDB;\n\n",
  "backend/config/generateToken.js": "const jwt = require(\"jsonwebtoken\");\n\nconst generateToken = (id) => {\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\n    expiresIn: \"30d\",\n  });\n};\n\nmodule.exports = generateToken;\n",
  "backend/controllers/chatControllers.js": "const asyncHandler = require(\"express-async-handler\");\nconst Chat = require(\"../models/chatModel\");\nconst User = require(\"../models/userModel\");\n\n//@description     Create or fetch One to One Chat\n//@route           POST /api/chat/\n//@access          Protected\nconst accessChat = asyncHandler(async (req, res) => {\n  const { userId } = req.body;\n\n  if (!userId) {\n    console.log(\"UserId param not sent with request\");\n    return res.sendStatus(400);\n  }\n\n  var isChat = await Chat.find({\n    isGroupChat: false,\n    $and: [\n      { users: { $elemMatch: { $eq: req.user._id } } },\n      { users: { $elemMatch: { $eq: userId } } },\n    ],\n  })\n    .populate(\"users\", \"-password\")\n    .populate(\"latestMessage\");\n\n  isChat = await User.populate(isChat, {\n    path: \"latestMessage.sender\",\n    select: \"name pic email\",\n  });\n\n  if (isChat.length > 0) {\n    res.send(isChat[0]);\n  } else {\n    var chatData = {\n      chatName: \"sender\",\n      isGroupChat: false,\n      users: [req.user._id, userId],\n    };\n\n    try {\n      const createdChat = await Chat.create(chatData);\n      const FullChat = await Chat.findOne({ _id: createdChat._id }).populate(\n        \"users\",\n        \"-password\"\n      );\n      res.status(200).json(FullChat);\n    } catch (error) {\n      res.status(400);\n      throw new Error(error.message);\n    }\n  }\n});\n\n//@description     Fetch all chats for a user\n//@route           GET /api/chat/\n//@access          Protected\nconst fetchChats = asyncHandler(async (req, res) => {\n  try {\n    Chat.find({ users: { $elemMatch: { $eq: req.user._id } } })\n      .populate(\"users\", \"-password\")\n      .populate(\"groupAdmin\", \"-password\")\n      .populate(\"latestMessage\")\n      .sort({ updatedAt: -1 })\n      .then(async (results) => {\n        results = await User.populate(results, {\n          path: \"latestMessage.sender\",\n          select: \"name pic email\",\n        });\n        res.status(200).send(results);\n      });\n  } catch (error) {\n    res.status(400);\n    throw new Error(error.message);\n  }\n});\n\n//@description     Create New Group Chat\n//@route           POST /api/chat/group\n//@access          Protected\nconst createGroupChat = asyncHandler(async (req, res) => {\n  if (!req.body.users || !req.body.name) {\n    return res.status(400).send({ message: \"Please Fill all the feilds\" });\n  }\n\n  var users = JSON.parse(req.body.users);\n\n  if (users.length < 2) {\n    return res\n      .status(400)\n      .send(\"More than 2 users are required to form a group chat\");\n  }\n\n  users.push(req.user);\n\n  try {\n    const groupChat = await Chat.create({\n      chatName: req.body.name,\n      users: users,\n      isGroupChat: true,\n      groupAdmin: req.user,\n    });\n\n    const fullGroupChat = await Chat.findOne({ _id: groupChat._id })\n      .populate(\"users\", \"-password\")\n      .populate(\"groupAdmin\", \"-password\");\n\n    res.status(200).json(fullGroupChat);\n  } catch (error) {\n    res.status(400);\n    throw new Error(error.message);\n  }\n});\n\n// @desc    Rename Group\n// @route   PUT /api/chat/rename\n// @access  Protected\nconst renameGroup = asyncHandler(async (req, res) => {\n  const { chatId, chatName } = req.body;\n\n  const updatedChat = await Chat.findByIdAndUpdate(\n    chatId,\n    {\n      chatName: chatName,\n    },\n    {\n      new: true,\n    }\n  )\n    .populate(\"users\", \"-password\")\n    .populate(\"groupAdmin\", \"-password\");\n\n  if (!updatedChat) {\n    res.status(404);\n    throw new Error(\"Chat Not Found\");\n  } else {\n    res.json(updatedChat);\n  }\n});\n\n// @desc    Remove user from Group\n// @route   PUT /api/chat/groupremove\n// @access  Protected\nconst removeFromGroup = asyncHandler(async (req, res) => {\n  const { chatId, userId } = req.body;\n\n  // check if the requester is admin\n\n  const removed = await Chat.findByIdAndUpdate(\n    chatId,\n    {\n      $pull: { users: userId },\n    },\n    {\n      new: true,\n    }\n  )\n    .populate(\"users\", \"-password\")\n    .populate(\"groupAdmin\", \"-password\");\n\n  if (!removed) {\n    res.status(404);\n    throw new Error(\"Chat Not Found\");\n  } else {\n    res.json(removed);\n  }\n});\n\n// @desc    Add user to Group / Leave\n// @route   PUT /api/chat/groupadd\n// @access  Protected\nconst addToGroup = asyncHandler(async (req, res) => {\n  const { chatId, userId } = req.body;\n\n  // check if the requester is admin\n\n  const added = await Chat.findByIdAndUpdate(\n    chatId,\n    {\n      $push: { users: userId },\n    },\n    {\n      new: true,\n    }\n  )\n    .populate(\"users\", \"-password\")\n    .populate(\"groupAdmin\", \"-password\");\n\n  if (!added) {\n    res.status(404);\n    throw new Error(\"Chat Not Found\");\n  } else {\n    res.json(added);\n  }\n});\n\nmodule.exports = {\n  accessChat,\n  fetchChats,\n  createGroupChat,\n  renameGroup,\n  addToGroup,\n  removeFromGroup,\n};\n",
  "backend/controllers/messageControllers.js": "const asyncHandler = require(\"express-async-handler\");\nconst Message = require(\"../models/messageModel\");\nconst User = require(\"../models/userModel\");\nconst Chat = require(\"../models/chatModel\");\n\n//@description     Get all Messages\n//@route           GET /api/Message/:chatId\n//@access          Protected\nconst allMessages = asyncHandler(async (req, res) => {\n  try {\n    const messages = await Message.find({ chat: req.params.chatId })\n      .populate(\"sender\", \"name pic email\")\n      .populate(\"chat\");\n    res.json(messages);\n  } catch (error) {\n    res.status(400);\n    throw new Error(error.message);\n  }\n});\n\n//@description     Create New Message\n//@route           POST /api/Message/\n//@access          Protected\nconst sendMessage = asyncHandler(async (req, res) => {\n  const { content, chatId } = req.body;\n\n  if (!content || !chatId) {\n    console.log(\"Invalid data passed into request\");\n    return res.sendStatus(400);\n  }\n\n  var newMessage = {\n    sender: req.user._id,\n    content: content,\n    chat: chatId,\n  };\n\n  try {\n    var message = await Message.create(newMessage);\n\n    message = await message.populate(\"sender\", \"name pic\").execPopulate();\n    message = await message.populate(\"chat\").execPopulate();\n    message = await User.populate(message, {\n      path: \"chat.users\",\n      select: \"name pic email\",\n    });\n\n    await Chat.findByIdAndUpdate(req.body.chatId, { latestMessage: message });\n\n    res.json(message);\n  } catch (error) {\n    res.status(400);\n    throw new Error(error.message);\n  }\n});\n\nmodule.exports = { allMessages, sendMessage };\n",
  "backend/controllers/userControllers.js": "const asyncHandler = require(\"express-async-handler\");\nconst User = require(\"../models/userModel\");\nconst generateToken = require(\"../config/generateToken\");\n\n//@description     Get or Search all users\n//@route           GET /api/user?search=\n//@access          Public\nconst allUsers = asyncHandler(async (req, res) => {\n  const keyword = req.query.search\n    ? {\n        $or: [\n          { name: { $regex: req.query.search, $options: \"i\" } },\n          { email: { $regex: req.query.search, $options: \"i\" } },\n        ],\n      }\n    : {};\n\n  const users = await User.find(keyword).find({ _id: { $ne: req.user._id } });\n  res.send(users);\n});\n\n//@description     Register new user\n//@route           POST /api/user/\n//@access          Public\nconst registerUser = asyncHandler(async (req, res) => {\n  const { name, email, password, pic } = req.body;\n\n  if (!name || !email || !password) {\n    res.status(400);\n    throw new Error(\"Please Enter all the Feilds\");\n  }\n\n  const userExists = await User.findOne({ email });\n\n  if (userExists) {\n    res.status(400);\n    throw new Error(\"User already exists\");\n  }\n\n  const user = await User.create({\n    name,\n    email,\n    password,\n    pic,\n  });\n\n  if (user) {\n    res.status(201).json({\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      pic: user.pic,\n      token: generateToken(user._id),\n    });\n  } else {\n    res.status(400);\n    throw new Error(\"User not found\");\n  }\n});\n\n//@description     Auth the user\n//@route           POST /api/users/login\n//@access          Public\nconst authUser = asyncHandler(async (req, res) => {\n  const { email, password } = req.body;\n\n  const user = await User.findOne({ email });\n\n  if (user && (await user.matchPassword(password))) {\n    res.json({\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      pic: user.pic,\n      token: generateToken(user._id),\n    });\n  } else {\n    res.status(401);\n    throw new Error(\"Invalid Email or Password\");\n  }\n});\n\nmodule.exports = { allUsers, registerUser, authUser };\n",
  "backend/data/data.js": "const chats = [\n  {\n    isGroupChat: false,\n    users: [\n      {\n        name: \"John Doe\",\n        email: \"john@example.com\",\n      },\n      {\n        name: \"Piyush\",\n        email: \"piyush@example.com\",\n      },\n    ],\n    _id: \"617a077e18c25468bc7c4dd4\",\n    chatName: \"John Doe\",\n  },\n  {\n    isGroupChat: false,\n    users: [\n      {\n        name: \"Guest User\",\n        email: \"guest@example.com\",\n      },\n      {\n        name: \"Piyush\",\n        email: \"piyush@example.com\",\n      },\n    ],\n    _id: \"617a077e18c25468b27c4dd4\",\n    chatName: \"Guest User\",\n  },\n  {\n    isGroupChat: false,\n    users: [\n      {\n        name: \"Anthony\",\n        email: \"anthony@example.com\",\n      },\n      {\n        name: \"Piyush\",\n        email: \"piyush@example.com\",\n      },\n    ],\n    _id: \"617a077e18c2d468bc7c4dd4\",\n    chatName: \"Anthony\",\n  },\n  {\n    isGroupChat: true,\n    users: [\n      {\n        name: \"John Doe\",\n        email: \"jon@example.com\",\n      },\n      {\n        name: \"Piyush\",\n        email: \"piyush@example.com\",\n      },\n      {\n        name: \"Guest User\",\n        email: \"guest@example.com\",\n      },\n    ],\n    _id: \"617a518c4081150716472c78\",\n    chatName: \"Friends\",\n    groupAdmin: {\n      name: \"Guest User\",\n      email: \"guest@example.com\",\n    },\n  },\n  {\n    isGroupChat: false,\n    users: [\n      {\n        name: \"Jane Doe\",\n        email: \"jane@example.com\",\n      },\n      {\n        name: \"Piyush\",\n        email: \"piyush@example.com\",\n      },\n    ],\n    _id: \"617a077e18c25468bc7cfdd4\",\n    chatName: \"Jane Doe\",\n  },\n  {\n    isGroupChat: true,\n    users: [\n      {\n        name: \"John Doe\",\n        email: \"jon@example.com\",\n      },\n      {\n        name: \"Piyush\",\n        email: \"piyush@example.com\",\n      },\n      {\n        name: \"Guest User\",\n        email: \"guest@example.com\",\n      },\n    ],\n    _id: \"617a518c4081150016472c78\",\n    chatName: \"Chill Zone\",\n    groupAdmin: {\n      name: \"Guest User\",\n      email: \"guest@example.com\",\n    },\n  },\n];\n",
  "backend/middleware/authMiddleware.js": "const jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/userModel.js\");\nconst asyncHandler = require(\"express-async-handler\");\n\nconst protect = asyncHandler(async (req, res, next) => {\n  let token;\n\n  if (\n    req.headers.authorization &&\n    req.headers.authorization.startsWith(\"Bearer\")\n  ) {\n    try {\n      token = req.headers.authorization.split(\" \")[1];\n\n      //decodes token id\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n      req.user = await User.findById(decoded.id).select(\"-password\");\n\n      next();\n    } catch (error) {\n      res.status(401);\n      throw new Error(\"Not authorized, token failed\");\n    }\n  }\n\n  if (!token) {\n    res.status(401);\n    throw new Error(\"Not authorized, no token\");\n  }\n});\n\nmodule.exports = { protect };\n",
  "backend/middleware/errorMiddleware.js": "const notFound = (req, res, next) => {\n  const error = new Error(`Not Found - ${req.originalUrl}`);\n  res.status(404);\n  next(error);\n};\n\nconst errorHandler = (err, req, res, next) => {\n  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;\n  res.status(statusCode);\n  res.json({\n    message: err.message,\n    stack: process.env.NODE_ENV === \"production\" ? null : err.stack,\n  });\n};\n\nmodule.exports = { notFound, errorHandler };\n",
  "backend/models/chatModel.js": "const mongoose = require(\"mongoose\");\n\nconst chatModel = mongoose.Schema(\n  {\n    chatName: { type: String, trim: true },\n    isGroupChat: { type: Boolean, default: false },\n    users: [{ type: mongoose.Schema.Types.ObjectId, ref: \"User\" }],\n    latestMessage: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Message\",\n    },\n    groupAdmin: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n  },\n  { timestamps: true }\n);\n\nconst Chat = mongoose.model(\"Chat\", chatModel);\n\nmodule.exports = Chat;\n",
  "backend/models/messageModel.js": "const mongoose = require(\"mongoose\");\n\nconst messageSchema = mongoose.Schema(\n  {\n    sender: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n    content: { type: String, trim: true },\n    chat: { type: mongoose.Schema.Types.ObjectId, ref: \"Chat\" },\n    readBy: [{ type: mongoose.Schema.Types.ObjectId, ref: \"User\" }],\n  },\n  { timestamps: true }\n);\n\nconst Message = mongoose.model(\"Message\", messageSchema);\nmodule.exports = Message;\n",
  "backend/models/userModel.js": "const mongoose = require(\"mongoose\");\nconst bcrypt = require(\"bcryptjs\");\n\nconst userSchema = mongoose.Schema(\n  {\n    name: { type: \"String\", required: true },\n    email: { type: \"String\", unique: true, required: true },\n    password: { type: \"String\", required: true },\n    pic: {\n      type: \"String\",\n      required: true,\n      default:\n        \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n    },\n    isAdmin: {\n      type: Boolean,\n      required: true,\n      default: false,\n    },\n  },\n  { timestaps: true }\n);\n\nuserSchema.methods.matchPassword = async function (enteredPassword) {\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified) {\n    next();\n  }\n\n  const salt = await bcrypt.genSalt(10);\n  this.password = await bcrypt.hash(this.password, salt);\n});\n\nconst User = mongoose.model(\"User\", userSchema);\n\nmodule.exports = User;\n",
  "backend/routes/chatRoutes.js": "const express = require(\"express\");\nconst {\n  accessChat,\n  fetchChats,\n  createGroupChat,\n  removeFromGroup,\n  addToGroup,\n  renameGroup,\n} = require(\"../controllers/chatControllers\");\nconst { protect } = require(\"../middleware/authMiddleware\");\n\nconst router = express.Router();\n\nrouter.route(\"/\").post(protect, accessChat);\nrouter.route(\"/\").get(protect, fetchChats);\nrouter.route(\"/group\").post(protect, createGroupChat);\nrouter.route(\"/rename\").put(protect, renameGroup);\nrouter.route(\"/groupremove\").put(protect, removeFromGroup);\nrouter.route(\"/groupadd\").put(protect, addToGroup);\n\nmodule.exports = router;\n",
  "backend/routes/messageRoutes.js": "const express = require(\"express\");\nconst {\n  allMessages,\n  sendMessage,\n} = require(\"../controllers/messageControllers\");\nconst { protect } = require(\"../middleware/authMiddleware\");\n\nconst router = express.Router();\n\nrouter.route(\"/:chatId\").get(protect, allMessages);\nrouter.route(\"/\").post(protect, sendMessage);\n\nmodule.exports = router;\n",
  "backend/routes/userRoutes.js": "const express = require(\"express\");\nconst {\n  registerUser,\n  authUser,\n  allUsers,\n} = require(\"../controllers/userControllers\");\nconst { protect } = require(\"../middleware/authMiddleware\");\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(protect, allUsers);\nrouter.route(\"/\").post(registerUser);\nrouter.post(\"/login\", authUser);\n\nmodule.exports = router;\n",
  "backend/server.js": "const express = require(\"express\");\nconst connectDB = require(\"./config/db\");\nconst dotenv = require(\"dotenv\");\nconst userRoutes = require(\"./routes/userRoutes\");\nconst chatRoutes = require(\"./routes/chatRoutes\");\nconst messageRoutes = require(\"./routes/messageRoutes\");\nconst { notFound, errorHandler } = require(\"./middleware/errorMiddleware\");\nconst path = require(\"path\");\n\ndotenv.config();\nconnectDB();\nconst app = express();\n\napp.use(express.json()); // to accept json data\n\n// app.get(\"/\", (req, res) => {\n//   res.send(\"API Running!\");\n// });\n\napp.use(\"/api/user\", userRoutes);\napp.use(\"/api/chat\", chatRoutes);\napp.use(\"/api/message\", messageRoutes);\n\n// --------------------------deployment------------------------------\n\nconst __dirname1 = path.resolve();\n\nif (process.env.NODE_ENV === \"production\") {\n  app.use(express.static(path.join(__dirname1, \"/frontend/build\")));\n\n  app.get(\"*\", (req, res) =>\n    res.sendFile(path.resolve(__dirname1, \"frontend\", \"build\", \"index.html\"))\n  );\n} else {\n  app.get(\"/\", (req, res) => {\n    res.send(\"API is running..\");\n  });\n}\n\n// --------------------------deployment------------------------------\n\n// Error Handling middlewares\napp.use(notFound);\napp.use(errorHandler);\n\nconst PORT = process.env.PORT;\n\nconst server = app.listen(\n  PORT,\n  console.log(`Server running on PORT ${PORT}...`.yellow.bold)\n);\n\nconst io = require(\"socket.io\")(server, {\n  pingTimeout: 60000,\n  cors: {\n    origin: \"http://localhost:3000\",\n    // credentials: true,\n  },\n});\n\nio.on(\"connection\", (socket) => {\n  console.log(\"Connected to socket.io\");\n  socket.on(\"setup\", (userData) => {\n    socket.join(userData._id);\n    socket.emit(\"connected\");\n  });\n\n  socket.on(\"join chat\", (room) => {\n    socket.join(room);\n    console.log(\"User Joined Room: \" + room);\n  });\n  socket.on(\"typing\", (room) => socket.in(room).emit(\"typing\"));\n  socket.on(\"stop typing\", (room) => socket.in(room).emit(\"stop typing\"));\n\n  socket.on(\"new message\", (newMessageRecieved) => {\n    var chat = newMessageRecieved.chat;\n\n    if (!chat.users) return console.log(\"chat.users not defined\");\n\n    chat.users.forEach((user) => {\n      if (user._id == newMessageRecieved.sender._id) return;\n\n      socket.in(user._id).emit(\"message recieved\", newMessageRecieved);\n    });\n  });\n\n  socket.off(\"setup\", () => {\n    console.log(\"USER DISCONNECTED\");\n    socket.leave(userData._id);\n  });\n});\n",
  "frontend/.gitignore": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# production\n# /build\n\n# misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n",
  "frontend/README.md": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `yarn start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `yarn test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `yarn build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `yarn eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `yarn build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n",
  "frontend/package.json": "{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"proxy\": \"http://127.0.0.1:5000\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@chakra-ui/icons\": \"^1.0.13\",\n    \"@chakra-ui/react\": \"^1.6.2\",\n    \"@emotion/react\": \"^11\",\n    \"@emotion/styled\": \"^11\",\n    \"@testing-library/jest-dom\": \"^5.11.4\",\n    \"@testing-library/react\": \"^11.1.0\",\n    \"@testing-library/user-event\": \"^12.1.10\",\n    \"axios\": \"^0.21.1\",\n    \"chat-app\": \"file:..\",\n    \"framer-motion\": \"^4\",\n    \"react\": \"^17.0.2\",\n    \"react-chips\": \"^0.8.0\",\n    \"react-dom\": \"^17.0.2\",\n    \"react-lottie\": \"^1.2.3\",\n    \"react-notification-badge\": \"^1.5.1\",\n    \"react-router-dom\": \"^5.2.0\",\n    \"react-scripts\": \"4.0.3\",\n    \"react-scrollable-feed\": \"^1.3.1\",\n    \"socket.io-client\": \"^4.1.2\",\n    \"web-vitals\": \"^1.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts --openssl-legacy-provider start\",\n    \"build\": \"react-scripts --openssl-legacy-provider build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n",
  "frontend/public/favicon.ico": null,
  "frontend/public/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\"\n      integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\"\n      crossorigin=\"anonymous\"\n      referrerpolicy=\"no-referrer\"\n    />\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>Talk-a-tive</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n",
  "frontend/public/logo192.png": null,
  "frontend/public/logo512.png": null,
  "frontend/public/manifest.json": "{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n",
  "frontend/public/robots.txt": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n",
  "frontend/src/App.css": "@import url(\"https://fonts.googleapis.com/css2?family=Work+Sans:wght@300&display=swap\");\n\n.App {\n  min-height: 100vh;\n  display: flex;\n  background-image: url(\"./background.png\");\n  background-position: center;\n  background-size: cover;\n}\n\n::-webkit-scrollbar {\n  width: 0px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(136, 136, 136, 0.281);\n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\n",
  "frontend/src/App.js": "import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n",
  "frontend/src/Context/ChatProvider.js": "import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n",
  "frontend/src/Pages/Chatpage.js": "import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n",
  "frontend/src/Pages/Homepage.js": "import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n",
  "frontend/src/animations/typing.json": "{\"v\":\"5.5.2\",\"fr\":60,\"ip\":0,\"op\":104,\"w\":84,\"h\":40,\"nm\":\"Typing-Indicator\",\"ddd\":0,\"assets\":[],\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Oval 3\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.643],\"y\":[1]},\"o\":{\"x\":[1],\"y\":[0]},\"t\":18,\"s\":[35],\"e\":[100]},{\"i\":{\"x\":[0.099],\"y\":[1]},\"o\":{\"x\":[0.129],\"y\":[0]},\"t\":33,\"s\":[100],\"e\":[35]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":65,\"s\":[35],\"e\":[35]},{\"t\":71}],\"ix\":11,\"x\":\"var $bm_rt;\\n$bm_rt = loopOut('cycle', 0);\"},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[61,20,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667,0.667,0.667],\"y\":[1,1,1]},\"o\":{\"x\":[1,1,0.333],\"y\":[0,0,0]},\"t\":18,\"s\":[100,100,100],\"e\":[140,140,100]},{\"i\":{\"x\":[0.032,0.032,0.667],\"y\":[1,1,1]},\"o\":{\"x\":[0.217,0.217,0.333],\"y\":[0,0,0]},\"t\":33,\"s\":[140,140,100],\"e\":[100,100,100]},{\"i\":{\"x\":[0.833,0.833,0.833],\"y\":[1,1,1]},\"o\":{\"x\":[0.167,0.167,0.167],\"y\":[0,0,0]},\"t\":65,\"s\":[100,100,100],\"e\":[100,100,100]},{\"t\":71}],\"ix\":6,\"x\":\"var $bm_rt;\\n$bm_rt = loopOut('cycle', 0);\"}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"d\":1,\"ty\":\"el\",\"s\":{\"a\":0,\"k\":[12,12],\"ix\":2},\"p\":{\"a\":0,\"k\":[0,0],\"ix\":3},\"nm\":\"Ellipse Path 1\",\"mn\":\"ADBE Vector Shape - Ellipse\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.847000002861,0.847000002861,0.847000002861,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Oval 3\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":3600,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":2,\"ty\":4,\"nm\":\"Oval 2\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667],\"y\":[1]},\"o\":{\"x\":[1],\"y\":[0]},\"t\":9,\"s\":[35],\"e\":[98]},{\"i\":{\"x\":[0.023],\"y\":[1]},\"o\":{\"x\":[0.179],\"y\":[0]},\"t\":24,\"s\":[98],\"e\":[35]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":56,\"s\":[35],\"e\":[35]},{\"t\":62}],\"ix\":11,\"x\":\"var $bm_rt;\\n$bm_rt = loopOut('cycle', 0);\"},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[41,20,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.654,0.654,0.667],\"y\":[1,1,1]},\"o\":{\"x\":[1,1,0.333],\"y\":[0,0,0]},\"t\":9,\"s\":[100,100,100],\"e\":[140,140,100]},{\"i\":{\"x\":[0.11,0.11,0.667],\"y\":[1,1,1]},\"o\":{\"x\":[0.205,0.205,0.333],\"y\":[0,0,0]},\"t\":24,\"s\":[140,140,100],\"e\":[100,100,100]},{\"i\":{\"x\":[0.833,0.833,0.833],\"y\":[1,1,1]},\"o\":{\"x\":[0.167,0.167,0.167],\"y\":[0,0,0]},\"t\":56,\"s\":[100,100,100],\"e\":[100,100,100]},{\"t\":62}],\"ix\":6,\"x\":\"var $bm_rt;\\n$bm_rt = loopOut('cycle', 0);\"}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"d\":1,\"ty\":\"el\",\"s\":{\"a\":0,\"k\":[12,12],\"ix\":2},\"p\":{\"a\":0,\"k\":[0,0],\"ix\":3},\"nm\":\"Ellipse Path 1\",\"mn\":\"ADBE Vector Shape - Ellipse\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.847000002861,0.847000002861,0.847000002861,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Oval 2\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":3600,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":3,\"ty\":4,\"nm\":\"Oval 1\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667],\"y\":[1]},\"o\":{\"x\":[1],\"y\":[0]},\"t\":0,\"s\":[35],\"e\":[100]},{\"i\":{\"x\":[0.067],\"y\":[1]},\"o\":{\"x\":[0.125],\"y\":[0]},\"t\":15,\"s\":[100],\"e\":[35]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":47,\"s\":[35],\"e\":[35]},{\"t\":53}],\"ix\":11,\"x\":\"var $bm_rt;\\n$bm_rt = loopOut('cycle', 0);\"},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[21,20,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.673,0.673,0.667],\"y\":[1,1,1]},\"o\":{\"x\":[1,1,0.333],\"y\":[0,0,0]},\"t\":0,\"s\":[100,100,100],\"e\":[140,140,100]},{\"i\":{\"x\":[0.049,0.049,0.667],\"y\":[1,1,1]},\"o\":{\"x\":[0.198,0.198,0.333],\"y\":[0,0,0]},\"t\":15,\"s\":[140,140,100],\"e\":[100,100,100]},{\"i\":{\"x\":[0.833,0.833,0.833],\"y\":[1,1,1]},\"o\":{\"x\":[0.167,0.167,0.167],\"y\":[0,0,0]},\"t\":47,\"s\":[100,100,100],\"e\":[100,100,100]},{\"t\":53}],\"ix\":6,\"x\":\"var $bm_rt;\\n$bm_rt = loopOut('cycle', 0);\"}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"d\":1,\"ty\":\"el\",\"s\":{\"a\":0,\"k\":[12,12],\"ix\":2},\"p\":{\"a\":0,\"k\":[0,0],\"ix\":3},\"nm\":\"Ellipse Path 1\",\"mn\":\"ADBE Vector Shape - Ellipse\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.847000002861,0.847000002861,0.847000002861,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Oval 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":3600,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":4,\"ty\":4,\"nm\":\"BG\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[42,20,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[0,0],[0,0],[0,0],[0,0]],\"o\":[[0,0],[0,0],[0,0],[0,0]],\"v\":[[-42,-20],[42,-20],[42,20],[-42,20]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"rd\",\"nm\":\"Round Corners 1\",\"r\":{\"a\":0,\"k\":20,\"ix\":1},\"ix\":2,\"mn\":\"ADBE Vector Filter - RC\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.96078401804,0.96078401804,0.96078401804,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"BG\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":3600,\"st\":0,\"bm\":0}],\"markers\":[]}",
  "frontend/src/components/Authentication/Login.js": "import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n",
  "frontend/src/components/Authentication/Signup.js": "import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n",
  "frontend/src/components/ChatLoading.js": "import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n",
  "frontend/src/components/Chatbox.js": "import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n",
  "frontend/src/components/MyChats.js": "import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n",
  "frontend/src/components/ScrollableChat.js": "import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n",
  "frontend/src/components/SingleChat.js": "import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n",
  "frontend/src/components/miscellaneous/GroupChatModal.js": "import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n",
  "frontend/src/components/miscellaneous/ProfileModal.js": "import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n",
  "frontend/src/components/miscellaneous/SideDrawer.js": "import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n",
  "frontend/src/components/miscellaneous/UpdateGroupChatModal.js": "import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n",
  "frontend/src/components/styles.css": ".messages {\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n  scrollbar-width: none;\n}\n",
  "frontend/src/components/userAvatar/UserBadgeItem.js": "import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n",
  "frontend/src/components/userAvatar/UserListItem.js": "import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n",
  "frontend/src/config/ChatLogics.js": "export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n",
  "frontend/src/data/messages.js": "export const messages = [\n  {\n    readBy: [],\n    _id: \"60a3f2ed0c8dcc43bc3cfff2\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"1\",\n      name: \"Piyush\",\n    },\n    content: \"Hello There\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:01:33.332Z\",\n    updatedAt: \"2021-05-18T17:01:33.332Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f47ece619262c884b77d\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"2\",\n      name: \"John Doe\",\n    },\n    content: \"Yo Wassup!\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:08:14.447Z\",\n    updatedAt: \"2021-05-18T17:08:14.447Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f47ece619262c884b77d\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"2\",\n      name: \"John Doe\",\n    },\n    content: \"How's it going!\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:09:14.447Z\",\n    updatedAt: \"2021-05-18T17:09:14.447Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f2ed0c8dcc43bc3cfff2\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"1\",\n      name: \"Piyush\",\n    },\n    content: \"All good!\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:011:33.332Z\",\n    updatedAt: \"2021-05-18T17:011:33.332Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f2ed0c8dcc43bc3cfff2\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"1\",\n      name: \"Piyush\",\n    },\n    content: \"What About You?\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:01:12.332Z\",\n    updatedAt: \"2021-05-18T17:01:12.332Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f47ece619262c884b77d\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"2\",\n      name: \"John Doe\",\n    },\n    content: \"Same, Thank You!\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:09:14.447Z\",\n    updatedAt: \"2021-05-18T17:09:14.447Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f47ece619262c884b77d\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"2\",\n      name: \"John Doe\",\n    },\n    content: \"What Techonologies are you learning these days?\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:09:16.447Z\",\n    updatedAt: \"2021-05-18T17:09:16.447Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f2ed0c8dcc43bc3cfff2\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"1\",\n      name: \"Piyush\",\n    },\n    content: \"Just the MERN Stack\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:01:18.332Z\",\n    updatedAt: \"2021-05-18T17:01:18.332Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f47ece619262c884b77d\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"2\",\n      name: \"John Doe\",\n    },\n    content: \"From Roadside Coder?\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:19:16.447Z\",\n    updatedAt: \"2021-05-18T17:19:16.447Z\",\n    __v: 0,\n  },\n  {\n    readBy: [],\n    _id: \"60a3f2ed0c8dcc43bc3cfff2\",\n    sender: {\n      pic: \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\",\n      _id: \"60a281bc502ec30428fb6bb0\",\n      name: \"Piyush\",\n    },\n    content: \"Yea boiii..\",\n    chat: \"60a3de1ff381d830b884998d\",\n    createdAt: \"2021-05-18T17:20:18.332Z\",\n    updatedAt: \"2021-05-18T17:20:18.332Z\",\n    __v: 0,\n  },\n];\n",
  "frontend/src/index.css": "body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",
  "frontend/src/index.js": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",
  "frontend/src/reportWebVitals.js": "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
  "package.json": "{\n  \"name\": \"chat-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node backend/server.js\",\n    \"server\": \"nodemon backend/server.js\",\n    \"build\": \"npm install --legacy-peer-deps && npm install --legacy-peer-deps --prefix frontend && npm run build --prefix frontend\"\n  },\n  \"keywords\": [\n    \"mern\",\n    \"chat-app\"\n  ],\n  \"author\": \"Piyush Agarwal\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"bcryptjs\": \"^2.4.3\",\n    \"colors\": \"^1.4.0\",\n    \"dotenv\": \"^9.0.2\",\n    \"express\": \"^4.17.1\",\n    \"express-async-handler\": \"^1.1.4\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongoose\": \"^5.12.9\",\n    \"nodemon\": \"^2.0.7\",\n    \"socket.io\": \"^4.1.2\"\n  }\n}\n"
}
